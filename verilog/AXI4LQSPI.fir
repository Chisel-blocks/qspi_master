circuit AXI4LQSPI :
  module clockgen :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, flip clk_div_valid : UInt<1>, flip clk_div : UInt<8>, spi_clk : UInt<1>, spi_fall : UInt<1>, spi_rise : UInt<1>}

    reg counter_target : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[clockgen.scala 22:31]
    reg counter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[clockgen.scala 23:24]
    reg spi_clk_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[clockgen.scala 24:28]
    reg running : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[clockgen.scala 25:24]
    wire counter_target_next : UInt @[clockgen.scala 28:40]
    counter_target_next <= counter_target @[clockgen.scala 28:40]
    wire counter_next : UInt @[clockgen.scala 29:33]
    counter_next <= counter @[clockgen.scala 29:33]
    wire spi_clk_next : UInt<1> @[clockgen.scala 30:33]
    spi_clk_next <= spi_clk_reg @[clockgen.scala 30:33]
    io.spi_rise <= UInt<1>("h0") @[clockgen.scala 33:15]
    io.spi_fall <= UInt<1>("h0") @[clockgen.scala 34:15]
    node _counter_target_next_T = mux(io.clk_div_valid, io.clk_div, counter_target) @[clockgen.scala 37:29]
    counter_target_next <= _counter_target_next_T @[clockgen.scala 37:23]
    node _T = eq(counter, counter_target) @[clockgen.scala 40:16]
    when _T : @[clockgen.scala 40:36]
      counter_next <= UInt<1>("h0") @[clockgen.scala 41:18]
      node _spi_clk_next_T = eq(spi_clk_reg, UInt<1>("h0")) @[clockgen.scala 42:21]
      spi_clk_next <= _spi_clk_next_T @[clockgen.scala 42:18]
      node _T_1 = eq(spi_clk_reg, UInt<1>("h0")) @[clockgen.scala 43:22]
      when _T_1 : @[clockgen.scala 43:35]
        io.spi_rise <= running @[clockgen.scala 44:19]
      else :
        io.spi_fall <= running @[clockgen.scala 46:19]
    else :
      node _T_2 = neq(counter, counter_target) @[clockgen.scala 48:22]
      when _T_2 : @[clockgen.scala 48:42]
        node _counter_next_T = add(counter, UInt<1>("h1")) @[clockgen.scala 49:29]
        node _counter_next_T_1 = tail(_counter_next_T, 1) @[clockgen.scala 49:29]
        counter_next <= _counter_next_T_1 @[clockgen.scala 49:18]
        spi_clk_next <= spi_clk_reg @[clockgen.scala 50:18]
    counter_target <= counter_target_next @[clockgen.scala 54:18]
    node _T_3 = eq(spi_clk_reg, UInt<1>("h0")) @[clockgen.scala 55:22]
    node _T_4 = eq(io.en, UInt<1>("h0")) @[clockgen.scala 55:37]
    node _T_5 = and(_T_3, _T_4) @[clockgen.scala 55:34]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[clockgen.scala 55:8]
    when _T_6 : @[clockgen.scala 55:46]
      running <= UInt<1>("h1") @[clockgen.scala 56:13]
      spi_clk_reg <= spi_clk_next @[clockgen.scala 57:17]
      counter <= counter_next @[clockgen.scala 58:13]
    else :
      running <= UInt<1>("h0") @[clockgen.scala 60:13]
    io.spi_clk <= spi_clk_reg @[clockgen.scala 64:14]

  module rx :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, flip rx_edge : UInt<1>, rx_done : UInt<1>, flip sdi0 : UInt<1>, flip sdi1 : UInt<1>, flip sdi2 : UInt<1>, flip sdi3 : UInt<1>, flip en_quad_in : UInt<1>, flip counter_in : UInt<16>, flip counter_in_upd : UInt<1>, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, clk_en_o : UInt<1>}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[rx.scala 31:22]
    reg counter : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[rx.scala 32:24]
    reg counterTrgt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h8")) @[rx.scala 33:28]
    reg dataInt : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rx.scala 34:24]
    io.rx_done <= UInt<1>("h0") @[rx.scala 37:14]
    io.data.valid <= UInt<1>("h0") @[rx.scala 38:17]
    io.data.bits <= dataInt @[rx.scala 39:16]
    io.clk_en_o <= UInt<1>("h0") @[rx.scala 40:15]
    node _word_Done_T = eq(io.en_quad_in, UInt<1>("h0")) @[rx.scala 43:20]
    node _word_Done_T_1 = bits(counter, 4, 0) @[rx.scala 43:45]
    node _word_Done_T_2 = eq(_word_Done_T_1, UInt<5>("h1f")) @[rx.scala 43:52]
    node _word_Done_T_3 = and(_word_Done_T, _word_Done_T_2) @[rx.scala 43:35]
    node _word_Done_T_4 = bits(counter, 2, 0) @[rx.scala 43:96]
    node _word_Done_T_5 = eq(_word_Done_T_4, UInt<3>("h7")) @[rx.scala 43:103]
    node _word_Done_T_6 = and(io.en_quad_in, _word_Done_T_5) @[rx.scala 43:86]
    node word_Done = or(_word_Done_T_3, _word_Done_T_6) @[rx.scala 43:68]
    node _done_T = sub(counterTrgt, UInt<1>("h1")) @[rx.scala 44:40]
    node _done_T_1 = tail(_done_T, 1) @[rx.scala 44:40]
    node _done_T_2 = eq(counter, _done_T_1) @[rx.scala 44:23]
    node done = and(_done_T_2, io.rx_edge) @[rx.scala 44:48]
    io.rx_done <= done @[rx.scala 46:14]
    when io.counter_in_upd : @[rx.scala 49:27]
      node _counterTrgt_T = bits(io.counter_in, 15, 2) @[rx.scala 50:66]
      node _counterTrgt_T_1 = cat(UInt<2>("h0"), _counterTrgt_T) @[Cat.scala 33:92]
      node _counterTrgt_T_2 = mux(io.en_quad_in, _counterTrgt_T_1, io.counter_in) @[rx.scala 50:23]
      counterTrgt <= _counterTrgt_T_2 @[rx.scala 50:17]
    node _T = eq(UInt<2>("h0"), state) @[rx.scala 54:17]
    when _T : @[rx.scala 54:17]
      io.clk_en_o <= UInt<1>("h0") @[rx.scala 56:19]
      when io.en : @[rx.scala 57:19]
        state <= UInt<2>("h1") @[rx.scala 58:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[rx.scala 54:17]
      when _T_1 : @[rx.scala 54:17]
        io.clk_en_o <= UInt<1>("h1") @[rx.scala 62:19]
        when io.rx_edge : @[rx.scala 63:24]
          node _counter_T = add(counter, UInt<1>("h1")) @[rx.scala 64:28]
          node _counter_T_1 = tail(_counter_T, 1) @[rx.scala 64:28]
          counter <= _counter_T_1 @[rx.scala 64:17]
          node _dataInt_T = bits(dataInt, 27, 0) @[rx.scala 65:50]
          node dataInt_lo = cat(io.sdi1, io.sdi0) @[Cat.scala 33:92]
          node dataInt_hi_hi = cat(_dataInt_T, io.sdi3) @[Cat.scala 33:92]
          node dataInt_hi = cat(dataInt_hi_hi, io.sdi2) @[Cat.scala 33:92]
          node _dataInt_T_1 = cat(dataInt_hi, dataInt_lo) @[Cat.scala 33:92]
          node _dataInt_T_2 = bits(dataInt, 30, 0) @[rx.scala 65:107]
          node _dataInt_T_3 = cat(_dataInt_T_2, io.sdi0) @[Cat.scala 33:92]
          node _dataInt_T_4 = mux(io.en_quad_in, _dataInt_T_1, _dataInt_T_3) @[rx.scala 65:23]
          dataInt <= _dataInt_T_4 @[rx.scala 65:17]
          when done : @[rx.scala 67:20]
            counter <= UInt<1>("h0") @[rx.scala 68:19]
            io.data.valid <= UInt<1>("h1") @[rx.scala 69:25]
            when io.data.ready : @[rx.scala 70:31]
              state <= UInt<2>("h0") @[rx.scala 71:19]
            else :
              state <= UInt<2>("h2") @[rx.scala 73:19]
          else :
            when word_Done : @[rx.scala 75:31]
              io.data.valid <= UInt<1>("h1") @[rx.scala 76:25]
              node _T_2 = eq(io.data.ready, UInt<1>("h0")) @[rx.scala 77:16]
              when _T_2 : @[rx.scala 77:32]
                state <= UInt<2>("h3") @[rx.scala 78:19]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[rx.scala 54:17]
        when _T_3 : @[rx.scala 54:17]
          io.data.valid <= UInt<1>("h1") @[rx.scala 84:21]
          when io.data.ready : @[rx.scala 85:27]
            state <= UInt<2>("h0") @[rx.scala 86:15]
        else :
          node _T_4 = eq(UInt<2>("h3"), state) @[rx.scala 54:17]
          when _T_4 : @[rx.scala 54:17]
            io.data.valid <= UInt<1>("h1") @[rx.scala 90:21]
            when io.data.ready : @[rx.scala 91:27]
              state <= UInt<2>("h1") @[rx.scala 92:15]


  module tx :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, flip tx_edge : UInt<1>, tx_done : UInt<1>, sdo0 : UInt<1>, sdo1 : UInt<1>, sdo2 : UInt<1>, sdo3 : UInt<1>, flip en_quad_in : UInt<1>, flip counter_in : UInt<16>, flip counter_in_upd : UInt<1>, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, clk_en_o : UInt<1>}

    reg dataInt : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[tx.scala 28:24]
    reg counter : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[tx.scala 29:24]
    reg counterTrgt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h8")) @[tx.scala 30:28]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[tx.scala 31:22]
    wire done : UInt<1> @[tx.scala 34:18]
    wire regDone : UInt<1> @[tx.scala 35:21]
    wire counter_next : UInt<16> @[tx.scala 36:26]
    counter_next <= counter @[tx.scala 37:16]
    when io.tx_edge : @[tx.scala 38:22]
      node _counter_next_T = add(counter, UInt<1>("h1")) @[tx.scala 39:31]
      node _counter_next_T_1 = tail(_counter_next_T, 1) @[tx.scala 39:31]
      counter_next <= _counter_next_T_1 @[tx.scala 39:20]
      when done : @[tx.scala 40:18]
        counter_next <= UInt<1>("h0") @[tx.scala 41:20]
    counter <= counter_next @[tx.scala 44:9]
    node _regDone_T = eq(io.en_quad_in, UInt<1>("h0")) @[tx.scala 47:15]
    node _regDone_T_1 = bits(counter, 4, 0) @[tx.scala 47:40]
    node _regDone_T_2 = eq(_regDone_T_1, UInt<5>("h1f")) @[tx.scala 47:47]
    node _regDone_T_3 = and(_regDone_T, _regDone_T_2) @[tx.scala 47:30]
    node _regDone_T_4 = bits(counter, 2, 0) @[tx.scala 47:91]
    node _regDone_T_5 = eq(_regDone_T_4, UInt<3>("h7")) @[tx.scala 47:98]
    node _regDone_T_6 = and(io.en_quad_in, _regDone_T_5) @[tx.scala 47:81]
    node _regDone_T_7 = or(_regDone_T_3, _regDone_T_6) @[tx.scala 47:63]
    regDone <= _regDone_T_7 @[tx.scala 47:11]
    node _done_T = sub(counterTrgt, UInt<1>("h1")) @[tx.scala 48:37]
    node _done_T_1 = tail(_done_T, 1) @[tx.scala 48:37]
    node _done_T_2 = eq(counter, _done_T_1) @[tx.scala 48:20]
    node _done_T_3 = and(_done_T_2, io.tx_edge) @[tx.scala 48:45]
    done <= _done_T_3 @[tx.scala 48:8]
    io.tx_done <= done @[tx.scala 51:14]
    io.data.ready <= UInt<1>("h0") @[tx.scala 52:17]
    node _io_sdo0_T = bits(dataInt, 28, 28) @[tx.scala 53:40]
    node _io_sdo0_T_1 = bits(dataInt, 31, 31) @[tx.scala 53:53]
    node _io_sdo0_T_2 = mux(io.en_quad_in, _io_sdo0_T, _io_sdo0_T_1) @[tx.scala 53:17]
    io.sdo0 <= _io_sdo0_T_2 @[tx.scala 53:11]
    node _io_sdo1_T = bits(dataInt, 29, 29) @[tx.scala 54:21]
    io.sdo1 <= _io_sdo1_T @[tx.scala 54:11]
    node _io_sdo2_T = bits(dataInt, 30, 30) @[tx.scala 55:21]
    io.sdo2 <= _io_sdo2_T @[tx.scala 55:11]
    node _io_sdo3_T = bits(dataInt, 31, 31) @[tx.scala 56:21]
    io.sdo3 <= _io_sdo3_T @[tx.scala 56:11]
    io.clk_en_o <= UInt<1>("h0") @[tx.scala 57:15]
    when io.counter_in_upd : @[tx.scala 60:27]
      node _counterTrgt_T = bits(io.counter_in, 15, 2) @[tx.scala 61:66]
      node _counterTrgt_T_1 = cat(UInt<2>("h0"), _counterTrgt_T) @[Cat.scala 33:92]
      node _counterTrgt_T_2 = mux(io.en_quad_in, _counterTrgt_T_1, io.counter_in) @[tx.scala 61:23]
      counterTrgt <= _counterTrgt_T_2 @[tx.scala 61:17]
    node _T = eq(UInt<1>("h0"), state) @[tx.scala 65:17]
    when _T : @[tx.scala 65:17]
      io.clk_en_o <= UInt<1>("h0") @[tx.scala 67:19]
      node _T_1 = and(io.en, io.data.valid) @[tx.scala 68:18]
      when _T_1 : @[tx.scala 68:36]
        dataInt <= io.data.bits @[tx.scala 69:17]
        io.data.ready <= UInt<1>("h1") @[tx.scala 70:23]
        state <= UInt<1>("h1") @[tx.scala 71:15]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[tx.scala 65:17]
      when _T_2 : @[tx.scala 65:17]
        io.clk_en_o <= UInt<1>("h1") @[tx.scala 75:19]
        when io.tx_edge : @[tx.scala 76:24]
          node _counter_next_T_2 = add(counter, UInt<1>("h1")) @[tx.scala 77:33]
          node _counter_next_T_3 = tail(_counter_next_T_2, 1) @[tx.scala 77:33]
          counter_next <= _counter_next_T_3 @[tx.scala 77:22]
          node _dataInt_T = bits(dataInt, 27, 0) @[tx.scala 78:50]
          node _dataInt_T_1 = cat(_dataInt_T, UInt<4>("h0")) @[Cat.scala 33:92]
          node _dataInt_T_2 = bits(dataInt, 30, 0) @[tx.scala 78:81]
          node _dataInt_T_3 = cat(_dataInt_T_2, UInt<1>("h0")) @[Cat.scala 33:92]
          node _dataInt_T_4 = mux(io.en_quad_in, _dataInt_T_1, _dataInt_T_3) @[tx.scala 78:23]
          dataInt <= _dataInt_T_4 @[tx.scala 78:17]
          when done : @[tx.scala 80:20]
            counter_next <= UInt<1>("h0") @[tx.scala 81:24]
            node _T_3 = and(io.en, io.data.valid) @[tx.scala 82:22]
            when _T_3 : @[tx.scala 82:40]
              dataInt <= io.data.bits @[tx.scala 83:21]
              io.data.ready <= UInt<1>("h1") @[tx.scala 84:27]
              state <= UInt<1>("h1") @[tx.scala 85:19]
            else :
              io.clk_en_o <= UInt<1>("h0") @[tx.scala 87:25]
              state <= UInt<1>("h0") @[tx.scala 88:19]
          else :
            when regDone : @[tx.scala 90:30]
              when io.data.valid : @[tx.scala 91:31]
                dataInt <= io.data.bits @[tx.scala 92:21]
                io.data.ready <= UInt<1>("h1") @[tx.scala 93:27]
              else :
                io.clk_en_o <= UInt<1>("h0") @[tx.scala 95:25]
                state <= UInt<1>("h0") @[tx.scala 96:19]


  module qspi_master :
    input clock : Clock
    input reset : Reset
    output io : { flip clk_div : UInt<8>, flip clk_div_valid : UInt<1>, flip addr : UInt<32>, flip addr_len : UInt<6>, flip cmd : UInt<32>, flip cmd_len : UInt<6>, flip dummy_len : UInt<16>, flip data_len : UInt<16>, flip data_tx : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, data_rx : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip single_read : UInt<1>, flip single_write : UInt<1>, flip quad_read : UInt<1>, flip quad_write : UInt<1>, spi_clk : UInt<1>, cs : UInt<1>, sdo0 : UInt<1>, sdo1 : UInt<1>, sdo2 : UInt<1>, sdo3 : UInt<1>, flip sdi0 : UInt<1>, flip sdi1 : UInt<1>, flip sdi2 : UInt<1>, flip sdi3 : UInt<1>, state : UInt<3>, quad_mode : UInt<1>}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[qspi_master.scala 53:22]
    io.state <= state @[qspi_master.scala 57:12]
    wire clock_en : UInt<1> @[qspi_master.scala 61:29]
    clock_en <= UInt<1>("h0") @[qspi_master.scala 61:29]
    wire cs_wire : UInt<1> @[qspi_master.scala 63:28]
    cs_wire <= UInt<1>("h1") @[qspi_master.scala 63:28]
    wire tx_en : UInt<1> @[qspi_master.scala 65:26]
    tx_en <= UInt<1>("h0") @[qspi_master.scala 65:26]
    wire rx_en : UInt<1> @[qspi_master.scala 67:26]
    rx_en <= UInt<1>("h0") @[qspi_master.scala 67:26]
    wire en_quad : UInt<1> @[qspi_master.scala 69:21]
    wire counter_tx : UInt<16> @[qspi_master.scala 71:31]
    counter_tx <= UInt<16>("h0") @[qspi_master.scala 71:31]
    wire counter_tx_upd : UInt<1> @[qspi_master.scala 73:35]
    counter_tx_upd <= UInt<1>("h0") @[qspi_master.scala 73:35]
    wire counter_rx : UInt<16> @[qspi_master.scala 75:31]
    counter_rx <= UInt<16>("h0") @[qspi_master.scala 75:31]
    wire counter_rx_upd : UInt<1> @[qspi_master.scala 77:35]
    counter_rx_upd <= UInt<1>("h0") @[qspi_master.scala 77:35]
    wire data_to_tx : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>} @[qspi_master.scala 79:24]
    data_to_tx.valid <= UInt<1>("h0") @[qspi_master.scala 81:20]
    data_to_tx.bits <= UInt<1>("h0") @[qspi_master.scala 83:19]
    wire tx_done : UInt<1> @[qspi_master.scala 85:21]
    wire rx_done : UInt<1> @[qspi_master.scala 88:21]
    wire tx_clock_en : UInt<1> @[qspi_master.scala 90:25]
    wire rx_clock_en : UInt<1> @[qspi_master.scala 92:25]
    wire selector : UInt<3> @[qspi_master.scala 94:29]
    selector <= UInt<3>("h0") @[qspi_master.scala 94:29]
    wire data_valid : UInt<1> @[qspi_master.scala 96:31]
    data_valid <= UInt<1>("h0") @[qspi_master.scala 96:31]
    wire spi_fall : UInt<1> @[qspi_master.scala 98:22]
    wire spi_rise : UInt<1> @[qspi_master.scala 100:22]
    wire spi_clk : UInt<1> @[qspi_master.scala 102:28]
    spi_clk <= UInt<1>("h0") @[qspi_master.scala 102:28]
    io.spi_clk <= spi_clk @[qspi_master.scala 104:18]
    reg en_quad_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qspi_master.scala 109:28]
    reg do_rx : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qspi_master.scala 111:22]
    inst clock_generator of clockgen @[qspi_master.scala 114:31]
    clock_generator.clock <= clock
    clock_generator.reset <= reset
    inst receiver of rx @[qspi_master.scala 115:24]
    receiver.clock <= clock
    receiver.reset <= reset
    inst transmitter of tx @[qspi_master.scala 116:27]
    transmitter.clock <= clock
    transmitter.reset <= reset
    node _T = or(io.quad_read, io.quad_write) @[qspi_master.scala 119:21]
    when _T : @[qspi_master.scala 119:39]
      en_quad_reg <= UInt<1>("h1") @[qspi_master.scala 120:17]
    else :
      node _T_1 = eq(state, UInt<3>("h0")) @[qspi_master.scala 121:20]
      when _T_1 : @[qspi_master.scala 121:30]
        en_quad_reg <= UInt<1>("h0") @[qspi_master.scala 122:17]
    node _T_2 = or(io.quad_read, io.single_read) @[qspi_master.scala 125:21]
    when _T_2 : @[qspi_master.scala 125:40]
      do_rx <= UInt<1>("h1") @[qspi_master.scala 126:11]
    else :
      node _T_3 = eq(state, UInt<3>("h0")) @[qspi_master.scala 127:20]
      when _T_3 : @[qspi_master.scala 127:30]
        do_rx <= UInt<1>("h0") @[qspi_master.scala 128:11]
    node _en_quad_T = or(io.quad_read, io.quad_write) @[qspi_master.scala 131:27]
    node _en_quad_T_1 = bits(en_quad_reg, 0, 0) @[qspi_master.scala 131:59]
    node _en_quad_T_2 = or(_en_quad_T, _en_quad_T_1) @[qspi_master.scala 131:44]
    en_quad <= _en_quad_T_2 @[qspi_master.scala 131:11]
    io.quad_mode <= en_quad @[qspi_master.scala 132:16]
    clock_generator.io.en <= clock_en @[qspi_master.scala 136:25]
    clock_generator.io.clk_div_valid <= io.clk_div_valid @[qspi_master.scala 137:36]
    clock_generator.io.clk_div <= io.clk_div @[qspi_master.scala 138:30]
    spi_fall <= clock_generator.io.spi_fall @[qspi_master.scala 139:12]
    spi_rise <= clock_generator.io.spi_rise @[qspi_master.scala 140:11]
    transmitter.io.tx_edge <= spi_fall @[qspi_master.scala 141:26]
    spi_clk <= clock_generator.io.spi_clk @[qspi_master.scala 142:11]
    receiver.io.rx_edge <= spi_rise @[qspi_master.scala 143:23]
    transmitter.io.en <= tx_en @[qspi_master.scala 146:21]
    transmitter.io.en_quad_in <= en_quad @[qspi_master.scala 147:29]
    transmitter.io.data <= data_to_tx @[qspi_master.scala 148:23]
    transmitter.io.counter_in <= counter_tx @[qspi_master.scala 149:29]
    transmitter.io.counter_in_upd <= counter_tx_upd @[qspi_master.scala 150:33]
    tx_done <= transmitter.io.tx_done @[qspi_master.scala 151:11]
    tx_clock_en <= transmitter.io.clk_en_o @[qspi_master.scala 152:15]
    io.sdo0 <= transmitter.io.sdo0 @[qspi_master.scala 153:11]
    io.sdo1 <= transmitter.io.sdo1 @[qspi_master.scala 154:11]
    io.sdo2 <= transmitter.io.sdo2 @[qspi_master.scala 155:11]
    io.sdo3 <= transmitter.io.sdo3 @[qspi_master.scala 156:11]
    receiver.io.en <= rx_en @[qspi_master.scala 159:18]
    receiver.io.en_quad_in <= en_quad @[qspi_master.scala 160:26]
    receiver.io.sdi0 <= io.sdi0 @[qspi_master.scala 161:20]
    receiver.io.sdi1 <= io.sdi1 @[qspi_master.scala 162:20]
    receiver.io.sdi2 <= io.sdi2 @[qspi_master.scala 163:20]
    receiver.io.sdi3 <= io.sdi3 @[qspi_master.scala 164:20]
    receiver.io.counter_in <= counter_rx @[qspi_master.scala 165:26]
    receiver.io.counter_in_upd <= counter_rx_upd @[qspi_master.scala 166:30]
    rx_done <= receiver.io.rx_done @[qspi_master.scala 167:11]
    io.data_rx.bits <= receiver.io.data.bits @[qspi_master.scala 168:14]
    io.data_rx.valid <= receiver.io.data.valid @[qspi_master.scala 168:14]
    receiver.io.data.ready <= io.data_rx.ready @[qspi_master.scala 168:14]
    rx_clock_en <= receiver.io.clk_en_o @[qspi_master.scala 169:15]
    io.data_tx.ready <= UInt<1>("h0") @[qspi_master.scala 172:20]
    node _data_to_tx_bits_T = eq(selector, UInt<1>("h0")) @[qspi_master.scala 174:15]
    node _data_to_tx_bits_T_1 = eq(selector, UInt<1>("h1")) @[qspi_master.scala 175:15]
    node _data_to_tx_bits_T_2 = eq(selector, UInt<2>("h2")) @[qspi_master.scala 176:15]
    node _data_to_tx_bits_T_3 = eq(selector, UInt<2>("h3")) @[qspi_master.scala 177:15]
    node _data_to_tx_bits_T_4 = eq(selector, UInt<3>("h4")) @[qspi_master.scala 178:15]
    node _data_to_tx_bits_T_5 = mux(_data_to_tx_bits_T_4, io.data_tx.bits, UInt<1>("h0")) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_6 = mux(_data_to_tx_bits_T_3, io.addr, _data_to_tx_bits_T_5) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_7 = mux(_data_to_tx_bits_T_2, io.cmd, _data_to_tx_bits_T_6) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_8 = mux(_data_to_tx_bits_T_1, UInt<1>("h0"), _data_to_tx_bits_T_7) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_9 = mux(_data_to_tx_bits_T, UInt<1>("h0"), _data_to_tx_bits_T_8) @[Mux.scala 101:16]
    data_to_tx.bits <= _data_to_tx_bits_T_9 @[qspi_master.scala 173:19]
    node _data_to_tx_valid_T = eq(selector, UInt<1>("h0")) @[qspi_master.scala 182:15]
    node _data_to_tx_valid_T_1 = eq(selector, UInt<1>("h1")) @[qspi_master.scala 183:15]
    node _data_to_tx_valid_T_2 = eq(selector, UInt<2>("h2")) @[qspi_master.scala 184:15]
    node _data_to_tx_valid_T_3 = eq(selector, UInt<2>("h3")) @[qspi_master.scala 185:15]
    node _data_to_tx_valid_T_4 = eq(selector, UInt<3>("h4")) @[qspi_master.scala 186:15]
    node _data_to_tx_valid_T_5 = mux(_data_to_tx_valid_T_4, io.data_tx.valid, UInt<1>("h0")) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_6 = mux(_data_to_tx_valid_T_3, data_valid, _data_to_tx_valid_T_5) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_7 = mux(_data_to_tx_valid_T_2, data_valid, _data_to_tx_valid_T_6) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_8 = mux(_data_to_tx_valid_T_1, UInt<1>("h1"), _data_to_tx_valid_T_7) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_9 = mux(_data_to_tx_valid_T, UInt<1>("h0"), _data_to_tx_valid_T_8) @[Mux.scala 101:16]
    data_to_tx.valid <= _data_to_tx_valid_T_9 @[qspi_master.scala 181:20]
    node _io_data_tx_ready_T = eq(selector, UInt<3>("h4")) @[qspi_master.scala 190:15]
    node _io_data_tx_ready_T_1 = mux(_io_data_tx_ready_T, data_to_tx.ready, UInt<1>("h0")) @[Mux.scala 101:16]
    io.data_tx.ready <= _io_data_tx_ready_T_1 @[qspi_master.scala 189:20]
    node _T_4 = eq(UInt<3>("h0"), state) @[qspi_master.scala 196:19]
    when _T_4 : @[qspi_master.scala 196:19]
      node _T_5 = or(io.single_read, io.single_write) @[qspi_master.scala 198:27]
      node _T_6 = or(_T_5, io.quad_read) @[qspi_master.scala 198:46]
      node _T_7 = or(_T_6, io.quad_write) @[qspi_master.scala 198:62]
      when _T_7 : @[qspi_master.scala 198:80]
        cs_wire <= UInt<1>("h0") @[qspi_master.scala 199:17]
        clock_en <= UInt<1>("h1") @[qspi_master.scala 200:18]
        node _T_8 = neq(io.cmd_len, UInt<1>("h0")) @[qspi_master.scala 201:25]
        when _T_8 : @[qspi_master.scala 201:34]
          counter_tx <= io.cmd_len @[qspi_master.scala 202:22]
          counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 203:26]
          selector <= UInt<2>("h2") @[qspi_master.scala 204:20]
          data_valid <= UInt<1>("h1") @[qspi_master.scala 205:22]
          tx_en <= UInt<1>("h1") @[qspi_master.scala 206:17]
          state <= UInt<3>("h1") @[qspi_master.scala 207:17]
        else :
          node _T_9 = neq(io.addr_len, UInt<1>("h0")) @[qspi_master.scala 208:32]
          when _T_9 : @[qspi_master.scala 208:41]
            counter_tx <= io.addr_len @[qspi_master.scala 209:22]
            counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 210:26]
            selector <= UInt<2>("h3") @[qspi_master.scala 211:20]
            data_valid <= UInt<1>("h1") @[qspi_master.scala 212:22]
            tx_en <= UInt<1>("h1") @[qspi_master.scala 213:17]
            state <= UInt<3>("h2") @[qspi_master.scala 214:17]
          else :
            node _T_10 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 215:32]
            when _T_10 : @[qspi_master.scala 215:41]
              node _T_11 = or(io.single_read, io.quad_read) @[qspi_master.scala 216:31]
              when _T_11 : @[qspi_master.scala 216:48]
                node _T_12 = neq(io.dummy_len, UInt<1>("h0")) @[qspi_master.scala 217:31]
                when _T_12 : @[qspi_master.scala 217:40]
                  counter_tx <= io.dummy_len @[qspi_master.scala 218:26]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 219:30]
                  selector <= UInt<1>("h1") @[qspi_master.scala 220:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 221:21]
                  state <= UInt<3>("h3") @[qspi_master.scala 222:21]
                else :
                  counter_rx <= io.data_len @[qspi_master.scala 224:26]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 225:30]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 226:21]
                  state <= UInt<3>("h5") @[qspi_master.scala 227:21]
              else :
                counter_tx <= io.data_len @[qspi_master.scala 230:24]
                counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 231:28]
                selector <= UInt<3>("h4") @[qspi_master.scala 232:22]
                tx_en <= UInt<1>("h1") @[qspi_master.scala 233:19]
                state <= UInt<3>("h4") @[qspi_master.scala 234:19]
            else :
              state <= UInt<3>("h0") @[qspi_master.scala 238:17]
    else :
      node _T_13 = eq(UInt<3>("h1"), state) @[qspi_master.scala 196:19]
      when _T_13 : @[qspi_master.scala 196:19]
        clock_en <= UInt<1>("h1") @[qspi_master.scala 244:16]
        cs_wire <= UInt<1>("h0") @[qspi_master.scala 245:15]
        when tx_done : @[qspi_master.scala 246:21]
          node _T_14 = neq(io.addr_len, UInt<1>("h0")) @[qspi_master.scala 247:26]
          when _T_14 : @[qspi_master.scala 247:35]
            counter_tx <= io.addr_len @[qspi_master.scala 248:22]
            counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 249:26]
            selector <= UInt<2>("h3") @[qspi_master.scala 250:20]
            data_valid <= UInt<1>("h1") @[qspi_master.scala 251:22]
            tx_en <= UInt<1>("h1") @[qspi_master.scala 252:17]
            state <= UInt<3>("h2") @[qspi_master.scala 253:17]
          else :
            node _T_15 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 254:32]
            when _T_15 : @[qspi_master.scala 254:41]
              when do_rx : @[qspi_master.scala 255:23]
                node _T_16 = neq(io.dummy_len, UInt<1>("h0")) @[qspi_master.scala 256:31]
                when _T_16 : @[qspi_master.scala 256:40]
                  counter_tx <= io.dummy_len @[qspi_master.scala 257:26]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 258:30]
                  selector <= UInt<1>("h1") @[qspi_master.scala 259:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 260:21]
                  state <= UInt<3>("h3") @[qspi_master.scala 261:21]
                else :
                  counter_rx <= io.data_len @[qspi_master.scala 263:26]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 264:30]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 265:21]
                  state <= UInt<3>("h5") @[qspi_master.scala 266:21]
              else :
                counter_tx <= io.data_len @[qspi_master.scala 269:24]
                counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 270:28]
                selector <= UInt<3>("h4") @[qspi_master.scala 271:22]
                tx_en <= UInt<1>("h1") @[qspi_master.scala 273:19]
                state <= UInt<3>("h4") @[qspi_master.scala 274:19]
            else :
              state <= UInt<3>("h0") @[qspi_master.scala 277:17]
        else :
          tx_en <= UInt<1>("h1") @[qspi_master.scala 280:15]
      else :
        node _T_17 = eq(UInt<3>("h2"), state) @[qspi_master.scala 196:19]
        when _T_17 : @[qspi_master.scala 196:19]
          clock_en <= UInt<1>("h1") @[qspi_master.scala 286:16]
          cs_wire <= UInt<1>("h0") @[qspi_master.scala 287:15]
          when tx_done : @[qspi_master.scala 288:21]
            node _T_18 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 289:26]
            when _T_18 : @[qspi_master.scala 289:35]
              when do_rx : @[qspi_master.scala 290:23]
                node _T_19 = neq(io.dummy_len, UInt<1>("h0")) @[qspi_master.scala 291:31]
                when _T_19 : @[qspi_master.scala 291:40]
                  counter_tx <= io.dummy_len @[qspi_master.scala 292:26]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 293:30]
                  selector <= UInt<1>("h1") @[qspi_master.scala 294:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 295:21]
                  state <= UInt<3>("h3") @[qspi_master.scala 296:21]
                else :
                  counter_rx <= io.data_len @[qspi_master.scala 298:26]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 299:30]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 300:21]
                  state <= UInt<3>("h5") @[qspi_master.scala 301:21]
              else :
                counter_tx <= io.data_len @[qspi_master.scala 304:24]
                counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 305:28]
                selector <= UInt<3>("h4") @[qspi_master.scala 306:22]
                tx_en <= UInt<1>("h1") @[qspi_master.scala 307:19]
                state <= UInt<3>("h4") @[qspi_master.scala 308:19]
            else :
              state <= UInt<3>("h0") @[qspi_master.scala 311:17]
          else :
            tx_en <= UInt<1>("h1") @[qspi_master.scala 314:15]
        else :
          node _T_20 = eq(UInt<3>("h3"), state) @[qspi_master.scala 196:19]
          when _T_20 : @[qspi_master.scala 196:19]
            clock_en <= UInt<1>("h1") @[qspi_master.scala 319:16]
            cs_wire <= UInt<1>("h0") @[qspi_master.scala 320:15]
            when tx_done : @[qspi_master.scala 321:21]
              node _T_21 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 322:26]
              when _T_21 : @[qspi_master.scala 322:35]
                when do_rx : @[qspi_master.scala 323:23]
                  counter_rx <= io.data_len @[qspi_master.scala 324:24]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 325:28]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 326:19]
                  state <= UInt<3>("h5") @[qspi_master.scala 327:19]
                else :
                  counter_tx <= io.data_len @[qspi_master.scala 329:24]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 330:28]
                  selector <= UInt<3>("h4") @[qspi_master.scala 331:22]
                  data_valid <= UInt<1>("h1") @[qspi_master.scala 332:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 333:19]
                  state <= UInt<3>("h4") @[qspi_master.scala 334:19]
              else :
                state <= UInt<3>("h0") @[qspi_master.scala 337:17]
            else :
              tx_en <= UInt<1>("h1") @[qspi_master.scala 340:15]
          else :
            node _T_22 = eq(UInt<3>("h4"), state) @[qspi_master.scala 196:19]
            when _T_22 : @[qspi_master.scala 196:19]
              clock_en <= tx_clock_en @[qspi_master.scala 346:16]
              cs_wire <= UInt<1>("h0") @[qspi_master.scala 347:15]
              selector <= UInt<3>("h4") @[qspi_master.scala 348:16]
              tx_en <= UInt<1>("h1") @[qspi_master.scala 349:13]
              when tx_done : @[qspi_master.scala 350:21]
                state <= UInt<3>("h0") @[qspi_master.scala 351:15]
                clock_en <= UInt<1>("h0") @[qspi_master.scala 352:18]
              else :
                state <= UInt<3>("h4") @[qspi_master.scala 354:15]
            else :
              node _T_23 = eq(UInt<3>("h5"), state) @[qspi_master.scala 196:19]
              when _T_23 : @[qspi_master.scala 196:19]
                clock_en <= rx_clock_en @[qspi_master.scala 359:16]
                cs_wire <= UInt<1>("h0") @[qspi_master.scala 360:15]
                when rx_done : @[qspi_master.scala 361:21]
                  state <= UInt<3>("h6") @[qspi_master.scala 362:15]
                else :
                  state <= UInt<3>("h5") @[qspi_master.scala 364:15]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 365:15]
              else :
                node _T_24 = eq(UInt<3>("h6"), state) @[qspi_master.scala 196:19]
                when _T_24 : @[qspi_master.scala 196:19]
                  clock_en <= UInt<1>("h1") @[qspi_master.scala 370:16]
                  cs_wire <= UInt<1>("h0") @[qspi_master.scala 371:15]
                  when spi_fall : @[qspi_master.scala 372:22]
                    state <= UInt<3>("h0") @[qspi_master.scala 373:15]
                  else :
                    state <= UInt<3>("h6") @[qspi_master.scala 375:15]
    io.cs <= cs_wire @[qspi_master.scala 381:9]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<5>}

    cmem ram : UInt<32> [16] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<5>}

    cmem ram : UInt<32> [16] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4LQSPI :
    output clk_rst : { flip ACLK : Clock, flip ARESETn : UInt<1>}
    output slave_port : { flip AR : { flip ready : UInt<1>, valid : UInt<1>, bits : { ADDR : UInt<32>, PROT : UInt<3>}}, R : { flip ready : UInt<1>, valid : UInt<1>, bits : { DATA : UInt<32>, RESP : UInt<2>}}, flip AW : { flip ready : UInt<1>, valid : UInt<1>, bits : { ADDR : UInt<32>, PROT : UInt<3>}}, flip W : { flip ready : UInt<1>, valid : UInt<1>, bits : { DATA : UInt<32>, STRB : UInt<4>}}, B : { flip ready : UInt<1>, valid : UInt<1>, bits : { RESP : UInt<2>}}}
    output io : { spi_clk : UInt<1>, cs : UInt<1>, sdo0 : UInt<1>, sdo1 : UInt<1>, sdo2 : UInt<1>, sdo3 : UInt<1>, flip sdi0 : UInt<1>, flip sdi1 : UInt<1>, flip sdi2 : UInt<1>, flip sdi3 : UInt<1>}

    node _T = not(clk_rst.ARESETn) @[AXI4LQSPI.scala 38:52]
    inst QSPIMASTER of qspi_master @[AXI4LQSPI.scala 39:11]
    QSPIMASTER.clock <= clk_rst.ACLK
    QSPIMASTER.reset <= _T
    io.spi_clk <= QSPIMASTER.io.spi_clk @[AXI4LQSPI.scala 43:14]
    io.cs <= QSPIMASTER.io.cs @[AXI4LQSPI.scala 44:9]
    io.sdo0 <= QSPIMASTER.io.sdo0 @[AXI4LQSPI.scala 45:11]
    io.sdo1 <= QSPIMASTER.io.sdo1 @[AXI4LQSPI.scala 46:11]
    io.sdo2 <= QSPIMASTER.io.sdo2 @[AXI4LQSPI.scala 47:11]
    io.sdo3 <= QSPIMASTER.io.sdo3 @[AXI4LQSPI.scala 48:11]
    QSPIMASTER.io.sdi0 <= io.sdi0 @[AXI4LQSPI.scala 49:22]
    QSPIMASTER.io.sdi1 <= io.sdi1 @[AXI4LQSPI.scala 50:22]
    QSPIMASTER.io.sdi2 <= io.sdi2 @[AXI4LQSPI.scala 51:22]
    QSPIMASTER.io.sdi3 <= io.sdi3 @[AXI4LQSPI.scala 52:22]
    wire clk_div : UInt<8> @[AXI4LQSPI.scala 57:25]
    clk_div <= UInt<8>("h0") @[AXI4LQSPI.scala 57:25]
    wire clk_div_valid : UInt<1> @[AXI4LQSPI.scala 58:31]
    clk_div_valid <= UInt<1>("h0") @[AXI4LQSPI.scala 58:31]
    wire addr : UInt<32> @[AXI4LQSPI.scala 61:22]
    addr <= UInt<32>("h0") @[AXI4LQSPI.scala 61:22]
    wire addr_len : UInt<6> @[AXI4LQSPI.scala 62:26]
    addr_len <= UInt<6>("h0") @[AXI4LQSPI.scala 62:26]
    wire cmd : UInt<32> @[AXI4LQSPI.scala 64:21]
    cmd <= UInt<32>("h0") @[AXI4LQSPI.scala 64:21]
    wire cmd_len : UInt<6> @[AXI4LQSPI.scala 65:25]
    cmd_len <= UInt<6>("h0") @[AXI4LQSPI.scala 65:25]
    wire dummy_len : UInt<16> @[AXI4LQSPI.scala 67:27]
    dummy_len <= UInt<16>("h0") @[AXI4LQSPI.scala 67:27]
    wire data_len : UInt<16> @[AXI4LQSPI.scala 69:26]
    data_len <= UInt<16>("h0") @[AXI4LQSPI.scala 69:26]
    wire data_tx : UInt<32> @[AXI4LQSPI.scala 70:25]
    data_tx <= UInt<32>("h0") @[AXI4LQSPI.scala 70:25]
    wire data_rx : UInt<32> @[AXI4LQSPI.scala 71:25]
    data_rx <= UInt<32>("h0") @[AXI4LQSPI.scala 71:25]
    wire single_read : UInt<1> @[AXI4LQSPI.scala 74:29]
    single_read <= UInt<1>("h0") @[AXI4LQSPI.scala 74:29]
    wire single_write : UInt<1> @[AXI4LQSPI.scala 75:30]
    single_write <= UInt<1>("h0") @[AXI4LQSPI.scala 75:30]
    wire quad_read : UInt<1> @[AXI4LQSPI.scala 76:27]
    quad_read <= UInt<1>("h0") @[AXI4LQSPI.scala 76:27]
    wire quad_write : UInt<1> @[AXI4LQSPI.scala 77:28]
    quad_write <= UInt<1>("h0") @[AXI4LQSPI.scala 77:28]
    wire state : UInt<3> @[AXI4LQSPI.scala 78:23]
    state <= UInt<3>("h0") @[AXI4LQSPI.scala 78:23]
    wire quad_mode : UInt<1> @[AXI4LQSPI.scala 79:27]
    quad_mode <= UInt<1>("h0") @[AXI4LQSPI.scala 79:27]
    node _T_1 = eq(clk_rst.ARESETn, UInt<1>("h0")) @[AXI4LQSPI.scala 83:49]
    inst tx_fifo of Queue @[AXI4LQSPI.scala 83:74]
    tx_fifo.clock <= clk_rst.ACLK
    tx_fifo.reset <= _T_1
    node _T_2 = eq(clk_rst.ARESETn, UInt<1>("h0")) @[AXI4LQSPI.scala 84:49]
    inst rx_fifo of Queue_1 @[AXI4LQSPI.scala 84:74]
    rx_fifo.clock <= clk_rst.ACLK
    rx_fifo.reset <= _T_2
    node _tx_fifoAlmostFull_T = eq(clk_rst.ARESETn, UInt<1>("h0")) @[AXI4LQSPI.scala 86:59]
    node _tx_fifoAlmostFull_T_1 = geq(tx_fifo.io.count, UInt<4>("he")) @[AXI4LQSPI.scala 86:103]
    reg tx_fifoAlmostFull : UInt<1>, clk_rst.ACLK with :
      reset => (UInt<1>("h0"), tx_fifoAlmostFull) @[AXI4LQSPI.scala 86:85]
    tx_fifoAlmostFull <= _tx_fifoAlmostFull_T_1 @[AXI4LQSPI.scala 86:85]
    node _rx_fifoAlmostFull_T = eq(clk_rst.ARESETn, UInt<1>("h0")) @[AXI4LQSPI.scala 87:59]
    node _rx_fifoAlmostFull_T_1 = geq(rx_fifo.io.count, UInt<4>("he")) @[AXI4LQSPI.scala 87:103]
    reg rx_fifoAlmostFull : UInt<1>, clk_rst.ACLK with :
      reset => (UInt<1>("h0"), rx_fifoAlmostFull) @[AXI4LQSPI.scala 87:85]
    rx_fifoAlmostFull <= _rx_fifoAlmostFull_T_1 @[AXI4LQSPI.scala 87:85]
    node _T_3 = eq(clk_rst.ARESETn, UInt<1>("h0")) @[AXI4LQSPI.scala 94:53]
    node _T_4 = eq(clk_rst.ARESETn, UInt<1>("h0")) @[AXI4LQSPI.scala 114:33]
    node _T_5 = not(clk_rst.ARESETn) @[axi4l_slavelogic.scala 53:37]
    wire _axi_regs_WIRE : UInt<40>[16] @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[0] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[1] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[2] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[3] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[4] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[5] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[6] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[7] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[8] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[9] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[10] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[11] <= UInt<40>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[12] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[13] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[14] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    _axi_regs_WIRE[15] <= UInt<32>("h0") @[axi4l_slavelogic.scala 56:67]
    reg axi_regs : UInt<40>[16], clk_rst.ACLK with :
      reset => (_T_5, _axi_regs_WIRE) @[axi4l_slavelogic.scala 56:29]
    clk_div <= axi_regs[0] @[axi4l_slavelogic.scala 72:16]
    clk_div_valid <= axi_regs[1] @[axi4l_slavelogic.scala 72:16]
    addr <= axi_regs[2] @[axi4l_slavelogic.scala 72:16]
    addr_len <= axi_regs[3] @[axi4l_slavelogic.scala 72:16]
    cmd <= axi_regs[4] @[axi4l_slavelogic.scala 72:16]
    cmd_len <= axi_regs[5] @[axi4l_slavelogic.scala 72:16]
    dummy_len <= axi_regs[6] @[axi4l_slavelogic.scala 72:16]
    data_len <= axi_regs[7] @[axi4l_slavelogic.scala 72:16]
    data_tx <= axi_regs[8] @[axi4l_slavelogic.scala 72:16]
    when UInt<1>("h1") : @[axi4l_slavelogic.scala 68:44]
      axi_regs[9] <= data_rx @[axi4l_slavelogic.scala 69:25]
    single_write <= axi_regs[10] @[axi4l_slavelogic.scala 72:16]
    single_read <= axi_regs[11] @[axi4l_slavelogic.scala 72:16]
    quad_write <= axi_regs[12] @[axi4l_slavelogic.scala 72:16]
    quad_read <= axi_regs[13] @[axi4l_slavelogic.scala 72:16]
    when UInt<1>("h1") : @[axi4l_slavelogic.scala 68:44]
      axi_regs[14] <= state @[axi4l_slavelogic.scala 69:25]
    when UInt<1>("h1") : @[axi4l_slavelogic.scala 68:44]
      axi_regs[15] <= quad_mode @[axi4l_slavelogic.scala 69:25]
    reg rStatus : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 96:28]
    reg rValid : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 97:27]
    reg rStall : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 98:27]
    wire rStallWire : UInt<1> @[axi4l_slavelogic.scala 99:35]
    rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 99:35]
    node _rHold_T = eq(slave_port.R.ready, UInt<1>("h0")) @[axi4l_slavelogic.scala 100:29]
    node rHold = and(rValid, _rHold_T) @[axi4l_slavelogic.scala 100:26]
    node _readOk_T = or(slave_port.AR.valid, rStatus) @[axi4l_slavelogic.scala 101:41]
    node _readOk_T_1 = eq(rHold, UInt<1>("h0")) @[axi4l_slavelogic.scala 101:56]
    node readOk = and(_readOk_T, _readOk_T_1) @[axi4l_slavelogic.scala 101:53]
    node _raddrBuf_T = eq(rStatus, UInt<1>("h0")) @[axi4l_slavelogic.scala 104:75]
    node _raddrBuf_T_1 = and(slave_port.AR.valid, _raddrBuf_T) @[axi4l_slavelogic.scala 104:72]
    reg raddrBuf : { ADDR : UInt<32>, PROT : UInt<3>}, clk_rst.ACLK with :
      reset => (UInt<1>("h0"), raddrBuf) @[Reg.scala 19:16]
    when _raddrBuf_T_1 : @[Reg.scala 20:18]
      raddrBuf <= slave_port.AR.bits @[Reg.scala 20:22]
    reg read_buf : UInt<32>, clk_rst.ACLK with :
      reset => (_T_5, UInt<32>("h0")) @[axi4l_slavelogic.scala 106:29]
    node _raddr_T = or(rStatus, rStall) @[axi4l_slavelogic.scala 109:31]
    node _raddr_T_1 = bits(raddrBuf.ADDR, 31, 2) @[axi4l_slavelogic.scala 109:59]
    node _raddr_T_2 = cat(_raddr_T_1, UInt<2>("h0")) @[Cat.scala 33:92]
    node _raddr_T_3 = bits(slave_port.AR.bits.ADDR, 31, 2) @[axi4l_slavelogic.scala 109:118]
    node _raddr_T_4 = cat(_raddr_T_3, UInt<2>("h0")) @[Cat.scala 33:92]
    node raddr = mux(_raddr_T, _raddr_T_2, _raddr_T_4) @[axi4l_slavelogic.scala 109:22]
    when slave_port.AR.valid : @[axi4l_slavelogic.scala 111:34]
      rStatus <= UInt<1>("h1") @[axi4l_slavelogic.scala 112:17]
    when slave_port.R.ready : @[axi4l_slavelogic.scala 115:33]
      rValid <= UInt<1>("h0") @[axi4l_slavelogic.scala 116:16]
    node _slave_port_AR_ready_T = eq(rStatus, UInt<1>("h0")) @[axi4l_slavelogic.scala 119:33]
    slave_port.AR.ready <= _slave_port_AR_ready_T @[axi4l_slavelogic.scala 119:30]
    slave_port.R.bits.DATA <= read_buf @[axi4l_slavelogic.scala 120:30]
    slave_port.R.bits.RESP <= UInt<1>("h0") @[axi4l_slavelogic.scala 121:30]
    slave_port.R.valid <= rValid @[axi4l_slavelogic.scala 122:30]
    wire _readAccessStrobes_WIRE : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_1 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_1 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_2 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_2 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_3 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_3 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_4 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_4 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_5 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_5 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_6 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_6 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_7 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_7 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_8 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_8 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_9 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_9 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_10 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_10 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_11 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_11 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_12 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_12 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_13 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_13 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_14 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_14 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_15 : UInt<1> @[axi4l_slavelogic.scala 124:84]
    _readAccessStrobes_WIRE_15 <= UInt<1>("h0") @[axi4l_slavelogic.scala 124:84]
    wire _readAccessStrobes_WIRE_16 : UInt<1>[16] @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[0] <= _readAccessStrobes_WIRE @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[1] <= _readAccessStrobes_WIRE_1 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[2] <= _readAccessStrobes_WIRE_2 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[3] <= _readAccessStrobes_WIRE_3 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[4] <= _readAccessStrobes_WIRE_4 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[5] <= _readAccessStrobes_WIRE_5 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[6] <= _readAccessStrobes_WIRE_6 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[7] <= _readAccessStrobes_WIRE_7 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[8] <= _readAccessStrobes_WIRE_8 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[9] <= _readAccessStrobes_WIRE_9 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[10] <= _readAccessStrobes_WIRE_10 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[11] <= _readAccessStrobes_WIRE_11 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[12] <= _readAccessStrobes_WIRE_12 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[13] <= _readAccessStrobes_WIRE_13 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[14] <= _readAccessStrobes_WIRE_14 @[axi4l_slavelogic.scala 124:72]
    _readAccessStrobes_WIRE_16[15] <= _readAccessStrobes_WIRE_15 @[axi4l_slavelogic.scala 124:72]
    reg readAccessStrobes : UInt<1>[16], clk_rst.ACLK with :
      reset => (UInt<1>("h0"), readAccessStrobes) @[axi4l_slavelogic.scala 124:38]
    readAccessStrobes <= _readAccessStrobes_WIRE_16 @[axi4l_slavelogic.scala 124:38]
    wire _readStrobes_WIRE : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_1 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_1 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_2 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_2 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_3 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_3 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_4 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_4 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_5 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_5 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_6 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_6 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_7 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_7 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_8 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_8 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_9 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_9 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_10 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_10 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_11 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_11 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_12 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_12 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_13 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_13 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_14 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_14 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_15 : UInt<1> @[axi4l_slavelogic.scala 125:78]
    _readStrobes_WIRE_15 <= UInt<1>("h0") @[axi4l_slavelogic.scala 125:78]
    wire _readStrobes_WIRE_16 : UInt<1>[16] @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[0] <= _readStrobes_WIRE @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[1] <= _readStrobes_WIRE_1 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[2] <= _readStrobes_WIRE_2 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[3] <= _readStrobes_WIRE_3 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[4] <= _readStrobes_WIRE_4 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[5] <= _readStrobes_WIRE_5 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[6] <= _readStrobes_WIRE_6 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[7] <= _readStrobes_WIRE_7 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[8] <= _readStrobes_WIRE_8 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[9] <= _readStrobes_WIRE_9 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[10] <= _readStrobes_WIRE_10 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[11] <= _readStrobes_WIRE_11 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[12] <= _readStrobes_WIRE_12 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[13] <= _readStrobes_WIRE_13 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[14] <= _readStrobes_WIRE_14 @[axi4l_slavelogic.scala 125:66]
    _readStrobes_WIRE_16[15] <= _readStrobes_WIRE_15 @[axi4l_slavelogic.scala 125:66]
    reg readStrobes : UInt<1>[16], clk_rst.ACLK with :
      reset => (UInt<1>("h0"), readStrobes) @[axi4l_slavelogic.scala 125:32]
    readStrobes <= _readStrobes_WIRE_16 @[axi4l_slavelogic.scala 125:32]
    wire index_addr : UInt @[axi4l_slavelogic.scala 127:35]
    index_addr <= UInt<1>("h0") @[axi4l_slavelogic.scala 127:35]
    node _T_6 = eq(raddr, UInt<1>("h0")) @[axi4l_slavelogic.scala 134:22]
    when _T_6 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<1>("h0") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_0_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_0_T_1 = and(readOk, _readAccessStrobes_0_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[0] <= _readAccessStrobes_0_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_0_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_0_T_1 = and(readOk, _readStrobes_0_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[0] <= _readStrobes_0_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T @[axi4l_slavelogic.scala 141:34]
    node _T_7 = eq(raddr, UInt<3>("h4")) @[axi4l_slavelogic.scala 134:22]
    when _T_7 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<1>("h1") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_1_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_1_T_1 = and(readOk, _readAccessStrobes_1_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[1] <= _readAccessStrobes_1_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_1_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_1_T_1 = and(readOk, _readStrobes_1_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[1] <= _readStrobes_1_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_1 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_1 @[axi4l_slavelogic.scala 141:34]
    node _T_8 = eq(raddr, UInt<4>("h8")) @[axi4l_slavelogic.scala 134:22]
    when _T_8 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<2>("h2") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_2_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_2_T_1 = and(readOk, _readAccessStrobes_2_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[2] <= _readAccessStrobes_2_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_2_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_2_T_1 = and(readOk, _readStrobes_2_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[2] <= _readStrobes_2_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_2 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_2 @[axi4l_slavelogic.scala 141:34]
    node _T_9 = eq(raddr, UInt<4>("hc")) @[axi4l_slavelogic.scala 134:22]
    when _T_9 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<2>("h3") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_3_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_3_T_1 = and(readOk, _readAccessStrobes_3_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[3] <= _readAccessStrobes_3_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_3_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_3_T_1 = and(readOk, _readStrobes_3_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[3] <= _readStrobes_3_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_3 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_3 @[axi4l_slavelogic.scala 141:34]
    node _T_10 = eq(raddr, UInt<5>("h10")) @[axi4l_slavelogic.scala 134:22]
    when _T_10 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<3>("h4") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_4_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_4_T_1 = and(readOk, _readAccessStrobes_4_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[4] <= _readAccessStrobes_4_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_4_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_4_T_1 = and(readOk, _readStrobes_4_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[4] <= _readStrobes_4_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_4 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_4 @[axi4l_slavelogic.scala 141:34]
    node _T_11 = eq(raddr, UInt<5>("h14")) @[axi4l_slavelogic.scala 134:22]
    when _T_11 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<3>("h5") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_5_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_5_T_1 = and(readOk, _readAccessStrobes_5_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[5] <= _readAccessStrobes_5_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_5_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_5_T_1 = and(readOk, _readStrobes_5_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[5] <= _readStrobes_5_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_5 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_5 @[axi4l_slavelogic.scala 141:34]
    node _T_12 = eq(raddr, UInt<5>("h18")) @[axi4l_slavelogic.scala 134:22]
    when _T_12 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<3>("h6") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_6_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_6_T_1 = and(readOk, _readAccessStrobes_6_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[6] <= _readAccessStrobes_6_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_6_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_6_T_1 = and(readOk, _readStrobes_6_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[6] <= _readStrobes_6_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_6 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_6 @[axi4l_slavelogic.scala 141:34]
    node _T_13 = eq(raddr, UInt<5>("h1c")) @[axi4l_slavelogic.scala 134:22]
    when _T_13 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<3>("h7") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_7_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_7_T_1 = and(readOk, _readAccessStrobes_7_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[7] <= _readAccessStrobes_7_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_7_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_7_T_1 = and(readOk, _readStrobes_7_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[7] <= _readStrobes_7_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_7 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_7 @[axi4l_slavelogic.scala 141:34]
    node _T_14 = eq(raddr, UInt<6>("h20")) @[axi4l_slavelogic.scala 134:22]
    when _T_14 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("h8") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_8_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_8_T_1 = and(readOk, _readAccessStrobes_8_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[8] <= _readAccessStrobes_8_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_8_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_8_T_1 = and(readOk, _readStrobes_8_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[8] <= _readStrobes_8_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_8 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_8 @[axi4l_slavelogic.scala 141:34]
    node _T_15 = eq(raddr, UInt<6>("h24")) @[axi4l_slavelogic.scala 134:22]
    when _T_15 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("h9") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_9_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_9_T_1 = and(readOk, _readAccessStrobes_9_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[9] <= _readAccessStrobes_9_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_9_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_9_T_1 = and(readOk, _readStrobes_9_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[9] <= _readStrobes_9_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_9 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_9 @[axi4l_slavelogic.scala 141:34]
    node _T_16 = eq(raddr, UInt<6>("h28")) @[axi4l_slavelogic.scala 134:22]
    when _T_16 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("ha") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_10_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_10_T_1 = and(readOk, _readAccessStrobes_10_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[10] <= _readAccessStrobes_10_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_10_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_10_T_1 = and(readOk, _readStrobes_10_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[10] <= _readStrobes_10_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_10 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_10 @[axi4l_slavelogic.scala 141:34]
    node _T_17 = eq(raddr, UInt<6>("h2b")) @[axi4l_slavelogic.scala 134:22]
    when _T_17 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("hb") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_11_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_11_T_1 = and(readOk, _readAccessStrobes_11_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[11] <= _readAccessStrobes_11_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_11_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_11_T_1 = and(readOk, _readStrobes_11_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[11] <= _readStrobes_11_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_11 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_11 @[axi4l_slavelogic.scala 141:34]
    node _T_18 = eq(raddr, UInt<6>("h30")) @[axi4l_slavelogic.scala 134:22]
    when _T_18 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("hc") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_12_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_12_T_1 = and(readOk, _readAccessStrobes_12_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[12] <= _readAccessStrobes_12_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_12_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_12_T_1 = and(readOk, _readStrobes_12_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[12] <= _readStrobes_12_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_12 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_12 @[axi4l_slavelogic.scala 141:34]
    node _T_19 = eq(raddr, UInt<6>("h34")) @[axi4l_slavelogic.scala 134:22]
    when _T_19 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("hd") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_13_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_13_T_1 = and(readOk, _readAccessStrobes_13_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[13] <= _readAccessStrobes_13_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_13_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_13_T_1 = and(readOk, _readStrobes_13_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[13] <= _readStrobes_13_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_13 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_13 @[axi4l_slavelogic.scala 141:34]
    node _T_20 = eq(raddr, UInt<6>("h38")) @[axi4l_slavelogic.scala 134:22]
    when _T_20 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("he") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_14_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_14_T_1 = and(readOk, _readAccessStrobes_14_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[14] <= _readAccessStrobes_14_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_14_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_14_T_1 = and(readOk, _readStrobes_14_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[14] <= _readStrobes_14_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_14 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_14 @[axi4l_slavelogic.scala 141:34]
    node _T_21 = eq(raddr, UInt<6>("h3c")) @[axi4l_slavelogic.scala 134:22]
    when _T_21 : @[axi4l_slavelogic.scala 134:37]
      rStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 135:24]
      index_addr <= UInt<4>("hf") @[axi4l_slavelogic.scala 137:24]
      node _readAccessStrobes_15_T = eq(rStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 139:47]
      node _readAccessStrobes_15_T_1 = and(readOk, _readAccessStrobes_15_T) @[axi4l_slavelogic.scala 139:44]
      readAccessStrobes[15] <= _readAccessStrobes_15_T_1 @[axi4l_slavelogic.scala 139:34]
      node _readStrobes_15_T = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 140:47]
      node _readStrobes_15_T_1 = and(readOk, _readStrobes_15_T) @[axi4l_slavelogic.scala 140:44]
      readStrobes[15] <= _readStrobes_15_T_1 @[axi4l_slavelogic.scala 140:34]
      node _rStall_T_15 = and(readOk, rStallWire) @[axi4l_slavelogic.scala 141:44]
      rStall <= _rStall_T_15 @[axi4l_slavelogic.scala 141:34]
    node _T_22 = eq(rStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 146:22]
    node _T_23 = and(readOk, _T_22) @[axi4l_slavelogic.scala 146:19]
    when _T_23 : @[axi4l_slavelogic.scala 146:35]
      rStatus <= UInt<1>("h0") @[axi4l_slavelogic.scala 147:17]
      rValid <= UInt<1>("h1") @[axi4l_slavelogic.scala 148:17]
      rStall <= UInt<1>("h0") @[axi4l_slavelogic.scala 149:17]
      node _read_buf_T = or(index_addr, UInt<4>("h0"))
      node _read_buf_T_1 = bits(_read_buf_T, 3, 0)
      read_buf <= axi_regs[_read_buf_T_1] @[axi4l_slavelogic.scala 150:18]
    reg wStatus : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 155:28]
    reg awStatus : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 156:29]
    reg bValid : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 157:27]
    reg wStall : UInt<1>, clk_rst.ACLK with :
      reset => (_T_5, UInt<1>("h0")) @[axi4l_slavelogic.scala 158:27]
    wire wStallWire : UInt<1> @[axi4l_slavelogic.scala 160:35]
    wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 160:35]
    node fastMode = and(slave_port.AW.valid, slave_port.W.valid) @[axi4l_slavelogic.scala 163:42]
    node slowMode = and(wStatus, awStatus) @[axi4l_slavelogic.scala 164:30]
    node _bHold_T = eq(slave_port.B.ready, UInt<1>("h0")) @[axi4l_slavelogic.scala 166:29]
    node bHold = and(bValid, _bHold_T) @[axi4l_slavelogic.scala 166:26]
    node _waddrBuf_T = eq(awStatus, UInt<1>("h0")) @[axi4l_slavelogic.scala 169:75]
    node _waddrBuf_T_1 = and(slave_port.AW.valid, _waddrBuf_T) @[axi4l_slavelogic.scala 169:72]
    reg waddrBuf : { ADDR : UInt<32>, PROT : UInt<3>}, clk_rst.ACLK with :
      reset => (UInt<1>("h0"), waddrBuf) @[Reg.scala 19:16]
    when _waddrBuf_T_1 : @[Reg.scala 20:18]
      waddrBuf <= slave_port.AW.bits @[Reg.scala 20:22]
    node _wdataBuf_T = eq(wStatus, UInt<1>("h0")) @[axi4l_slavelogic.scala 170:73]
    node _wdataBuf_T_1 = and(slave_port.W.valid, _wdataBuf_T) @[axi4l_slavelogic.scala 170:70]
    reg wdataBuf : { DATA : UInt<32>, STRB : UInt<4>}, clk_rst.ACLK with :
      reset => (UInt<1>("h0"), wdataBuf) @[Reg.scala 19:16]
    when _wdataBuf_T_1 : @[Reg.scala 20:18]
      wdataBuf <= slave_port.W.bits @[Reg.scala 20:22]
    node _waddr_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 172:35]
    node _waddr_T_1 = and(fastMode, _waddr_T) @[axi4l_slavelogic.scala 172:32]
    node _waddr_T_2 = bits(slave_port.AW.bits.ADDR, 31, 2) @[axi4l_slavelogic.scala 173:50]
    node _waddr_T_3 = cat(_waddr_T_2, UInt<2>("h0")) @[Cat.scala 33:92]
    node _waddr_T_4 = bits(waddrBuf.ADDR, 31, 2) @[axi4l_slavelogic.scala 174:40]
    node _waddr_T_5 = cat(_waddr_T_4, UInt<2>("h0")) @[Cat.scala 33:92]
    node waddr = mux(_waddr_T_1, _waddr_T_3, _waddr_T_5) @[axi4l_slavelogic.scala 172:22]
    node _wdata_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 176:35]
    node _wdata_T_1 = and(fastMode, _wdata_T) @[axi4l_slavelogic.scala 176:32]
    node wdata = mux(_wdata_T_1, slave_port.W.bits, wdataBuf) @[axi4l_slavelogic.scala 176:22]
    when slave_port.AW.valid : @[axi4l_slavelogic.scala 180:34]
      awStatus <= UInt<1>("h1") @[axi4l_slavelogic.scala 181:18]
    when slave_port.W.valid : @[axi4l_slavelogic.scala 184:33]
      wStatus <= UInt<1>("h1") @[axi4l_slavelogic.scala 185:17]
    when slave_port.B.ready : @[axi4l_slavelogic.scala 188:33]
      bValid <= UInt<1>("h0") @[axi4l_slavelogic.scala 189:16]
    node _slave_port_AW_ready_T = eq(awStatus, UInt<1>("h0")) @[axi4l_slavelogic.scala 192:30]
    slave_port.AW.ready <= _slave_port_AW_ready_T @[axi4l_slavelogic.scala 192:27]
    node _slave_port_W_ready_T = eq(wStatus, UInt<1>("h0")) @[axi4l_slavelogic.scala 193:30]
    slave_port.W.ready <= _slave_port_W_ready_T @[axi4l_slavelogic.scala 193:27]
    slave_port.B.valid <= bValid @[axi4l_slavelogic.scala 194:27]
    slave_port.B.bits.RESP <= UInt<1>("h0") @[axi4l_slavelogic.scala 195:30]
    wire wr_reg_index : UInt @[axi4l_slavelogic.scala 197:43]
    wr_reg_index <= UInt<1>("h0") @[axi4l_slavelogic.scala 197:43]
    wire wr_address_match : UInt<1> @[axi4l_slavelogic.scala 198:43]
    wr_address_match <= UInt<1>("h0") @[axi4l_slavelogic.scala 198:43]
    wire _writeAccessStrobes_WIRE : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_1 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_1 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_2 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_2 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_3 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_3 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_4 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_4 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_5 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_5 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_6 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_6 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_7 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_7 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_8 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_8 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_9 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_9 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_10 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_10 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_11 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_11 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_12 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_12 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_13 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_13 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_14 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_14 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_15 : UInt<1> @[axi4l_slavelogic.scala 199:85]
    _writeAccessStrobes_WIRE_15 <= UInt<1>("h0") @[axi4l_slavelogic.scala 199:85]
    wire _writeAccessStrobes_WIRE_16 : UInt<1>[16] @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[0] <= _writeAccessStrobes_WIRE @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[1] <= _writeAccessStrobes_WIRE_1 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[2] <= _writeAccessStrobes_WIRE_2 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[3] <= _writeAccessStrobes_WIRE_3 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[4] <= _writeAccessStrobes_WIRE_4 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[5] <= _writeAccessStrobes_WIRE_5 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[6] <= _writeAccessStrobes_WIRE_6 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[7] <= _writeAccessStrobes_WIRE_7 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[8] <= _writeAccessStrobes_WIRE_8 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[9] <= _writeAccessStrobes_WIRE_9 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[10] <= _writeAccessStrobes_WIRE_10 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[11] <= _writeAccessStrobes_WIRE_11 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[12] <= _writeAccessStrobes_WIRE_12 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[13] <= _writeAccessStrobes_WIRE_13 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[14] <= _writeAccessStrobes_WIRE_14 @[axi4l_slavelogic.scala 199:73]
    _writeAccessStrobes_WIRE_16[15] <= _writeAccessStrobes_WIRE_15 @[axi4l_slavelogic.scala 199:73]
    reg writeAccessStrobes : UInt<1>[16], clk_rst.ACLK with :
      reset => (UInt<1>("h0"), writeAccessStrobes) @[axi4l_slavelogic.scala 199:39]
    writeAccessStrobes <= _writeAccessStrobes_WIRE_16 @[axi4l_slavelogic.scala 199:39]
    wire _writeStrobes_WIRE : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_1 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_1 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_2 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_2 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_3 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_3 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_4 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_4 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_5 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_5 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_6 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_6 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_7 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_7 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_8 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_8 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_9 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_9 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_10 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_10 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_11 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_11 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_12 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_12 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_13 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_13 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_14 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_14 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_15 : UInt<1> @[axi4l_slavelogic.scala 200:85]
    _writeStrobes_WIRE_15 <= UInt<1>("h0") @[axi4l_slavelogic.scala 200:85]
    wire _writeStrobes_WIRE_16 : UInt<1>[16] @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[0] <= _writeStrobes_WIRE @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[1] <= _writeStrobes_WIRE_1 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[2] <= _writeStrobes_WIRE_2 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[3] <= _writeStrobes_WIRE_3 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[4] <= _writeStrobes_WIRE_4 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[5] <= _writeStrobes_WIRE_5 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[6] <= _writeStrobes_WIRE_6 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[7] <= _writeStrobes_WIRE_7 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[8] <= _writeStrobes_WIRE_8 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[9] <= _writeStrobes_WIRE_9 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[10] <= _writeStrobes_WIRE_10 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[11] <= _writeStrobes_WIRE_11 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[12] <= _writeStrobes_WIRE_12 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[13] <= _writeStrobes_WIRE_13 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[14] <= _writeStrobes_WIRE_14 @[axi4l_slavelogic.scala 200:73]
    _writeStrobes_WIRE_16[15] <= _writeStrobes_WIRE_15 @[axi4l_slavelogic.scala 200:73]
    reg writeStrobes : UInt<1>[16], clk_rst.ACLK with :
      reset => (UInt<1>("h0"), writeStrobes) @[axi4l_slavelogic.scala 200:39]
    writeStrobes <= _writeStrobes_WIRE_16 @[axi4l_slavelogic.scala 200:39]
    node _writeOk_T = or(fastMode, slowMode) @[axi4l_slavelogic.scala 202:31]
    node _writeOk_T_1 = eq(bHold, UInt<1>("h0")) @[axi4l_slavelogic.scala 202:47]
    node writeOk = and(_writeOk_T, _writeOk_T_1) @[axi4l_slavelogic.scala 202:44]
    node _T_24 = eq(waddr, UInt<1>("h0")) @[axi4l_slavelogic.scala 211:22]
    when _T_24 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<1>("h0") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_0_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_0_T_1 = and(writeOk, _writeAccessStrobes_0_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[0] <= _writeAccessStrobes_0_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_0_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_0_T_1 = and(writeOk, _writeStrobes_0_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[0] <= _writeStrobes_0_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T @[axi4l_slavelogic.scala 219:35]
    node _T_25 = eq(waddr, UInt<3>("h4")) @[axi4l_slavelogic.scala 211:22]
    when _T_25 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<1>("h1") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_1_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_1_T_1 = and(writeOk, _writeAccessStrobes_1_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[1] <= _writeAccessStrobes_1_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_1_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_1_T_1 = and(writeOk, _writeStrobes_1_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[1] <= _writeStrobes_1_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_1 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_1 @[axi4l_slavelogic.scala 219:35]
    node _T_26 = eq(waddr, UInt<4>("h8")) @[axi4l_slavelogic.scala 211:22]
    when _T_26 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<2>("h2") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_2_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_2_T_1 = and(writeOk, _writeAccessStrobes_2_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[2] <= _writeAccessStrobes_2_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_2_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_2_T_1 = and(writeOk, _writeStrobes_2_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[2] <= _writeStrobes_2_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_2 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_2 @[axi4l_slavelogic.scala 219:35]
    node _T_27 = eq(waddr, UInt<4>("hc")) @[axi4l_slavelogic.scala 211:22]
    when _T_27 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<2>("h3") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_3_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_3_T_1 = and(writeOk, _writeAccessStrobes_3_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[3] <= _writeAccessStrobes_3_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_3_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_3_T_1 = and(writeOk, _writeStrobes_3_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[3] <= _writeStrobes_3_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_3 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_3 @[axi4l_slavelogic.scala 219:35]
    node _T_28 = eq(waddr, UInt<5>("h10")) @[axi4l_slavelogic.scala 211:22]
    when _T_28 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<3>("h4") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_4_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_4_T_1 = and(writeOk, _writeAccessStrobes_4_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[4] <= _writeAccessStrobes_4_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_4_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_4_T_1 = and(writeOk, _writeStrobes_4_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[4] <= _writeStrobes_4_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_4 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_4 @[axi4l_slavelogic.scala 219:35]
    node _T_29 = eq(waddr, UInt<5>("h14")) @[axi4l_slavelogic.scala 211:22]
    when _T_29 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<3>("h5") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_5_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_5_T_1 = and(writeOk, _writeAccessStrobes_5_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[5] <= _writeAccessStrobes_5_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_5_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_5_T_1 = and(writeOk, _writeStrobes_5_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[5] <= _writeStrobes_5_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_5 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_5 @[axi4l_slavelogic.scala 219:35]
    node _T_30 = eq(waddr, UInt<5>("h18")) @[axi4l_slavelogic.scala 211:22]
    when _T_30 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<3>("h6") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_6_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_6_T_1 = and(writeOk, _writeAccessStrobes_6_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[6] <= _writeAccessStrobes_6_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_6_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_6_T_1 = and(writeOk, _writeStrobes_6_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[6] <= _writeStrobes_6_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_6 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_6 @[axi4l_slavelogic.scala 219:35]
    node _T_31 = eq(waddr, UInt<5>("h1c")) @[axi4l_slavelogic.scala 211:22]
    when _T_31 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<3>("h7") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_7_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_7_T_1 = and(writeOk, _writeAccessStrobes_7_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[7] <= _writeAccessStrobes_7_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_7_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_7_T_1 = and(writeOk, _writeStrobes_7_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[7] <= _writeStrobes_7_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_7 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_7 @[axi4l_slavelogic.scala 219:35]
    node _T_32 = eq(waddr, UInt<6>("h20")) @[axi4l_slavelogic.scala 211:22]
    when _T_32 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= tx_fifoAlmostFull @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<4>("h8") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_8_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_8_T_1 = and(writeOk, _writeAccessStrobes_8_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[8] <= _writeAccessStrobes_8_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_8_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_8_T_1 = and(writeOk, _writeStrobes_8_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[8] <= _writeStrobes_8_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_8 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_8 @[axi4l_slavelogic.scala 219:35]
    node _T_33 = eq(waddr, UInt<6>("h28")) @[axi4l_slavelogic.scala 211:22]
    when _T_33 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<4>("ha") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_10_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_10_T_1 = and(writeOk, _writeAccessStrobes_10_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[10] <= _writeAccessStrobes_10_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_10_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_10_T_1 = and(writeOk, _writeStrobes_10_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[10] <= _writeStrobes_10_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_9 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_9 @[axi4l_slavelogic.scala 219:35]
    node _T_34 = eq(waddr, UInt<6>("h2b")) @[axi4l_slavelogic.scala 211:22]
    when _T_34 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<4>("hb") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_11_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_11_T_1 = and(writeOk, _writeAccessStrobes_11_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[11] <= _writeAccessStrobes_11_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_11_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_11_T_1 = and(writeOk, _writeStrobes_11_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[11] <= _writeStrobes_11_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_10 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_10 @[axi4l_slavelogic.scala 219:35]
    node _T_35 = eq(waddr, UInt<6>("h30")) @[axi4l_slavelogic.scala 211:22]
    when _T_35 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<4>("hc") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_12_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_12_T_1 = and(writeOk, _writeAccessStrobes_12_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[12] <= _writeAccessStrobes_12_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_12_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_12_T_1 = and(writeOk, _writeStrobes_12_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[12] <= _writeStrobes_12_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_11 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_11 @[axi4l_slavelogic.scala 219:35]
    node _T_36 = eq(waddr, UInt<6>("h34")) @[axi4l_slavelogic.scala 211:22]
    when _T_36 : @[axi4l_slavelogic.scala 211:37]
      wStallWire <= UInt<1>("h0") @[axi4l_slavelogic.scala 212:34]
      wr_reg_index <= UInt<4>("hd") @[axi4l_slavelogic.scala 214:30]
      wr_address_match <= UInt<1>("h1") @[axi4l_slavelogic.scala 215:30]
      node _writeAccessStrobes_13_T = eq(wStall, UInt<1>("h0")) @[axi4l_slavelogic.scala 217:49]
      node _writeAccessStrobes_13_T_1 = and(writeOk, _writeAccessStrobes_13_T) @[axi4l_slavelogic.scala 217:46]
      writeAccessStrobes[13] <= _writeAccessStrobes_13_T_1 @[axi4l_slavelogic.scala 217:35]
      node _writeStrobes_13_T = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 218:49]
      node _writeStrobes_13_T_1 = and(writeOk, _writeStrobes_13_T) @[axi4l_slavelogic.scala 218:46]
      writeStrobes[13] <= _writeStrobes_13_T_1 @[axi4l_slavelogic.scala 218:35]
      node _wStall_T_12 = and(writeOk, wStallWire) @[axi4l_slavelogic.scala 219:46]
      wStall <= _wStall_T_12 @[axi4l_slavelogic.scala 219:35]
    wire new_out : UInt<8>[4] @[axi4l_slavelogic.scala 225:25]
    node _T_37 = bits(wdata.STRB, 0, 0) @[axi4l_slavelogic.scala 227:24]
    node _T_38 = eq(_T_37, UInt<1>("h1")) @[axi4l_slavelogic.scala 227:28]
    when _T_38 : @[axi4l_slavelogic.scala 227:37]
      node _new_out_0_T = bits(wdata.DATA, 7, 0) @[axi4l_slavelogic.scala 228:35]
      new_out[0] <= _new_out_0_T @[axi4l_slavelogic.scala 228:22]
    else :
      node _new_out_0_T_1 = or(wr_reg_index, UInt<4>("h0"))
      node _new_out_0_T_2 = bits(_new_out_0_T_1, 3, 0)
      node _new_out_0_T_3 = bits(axi_regs[_new_out_0_T_2], 7, 0) @[axi4l_slavelogic.scala 230:47]
      new_out[0] <= _new_out_0_T_3 @[axi4l_slavelogic.scala 230:22]
    node _T_39 = bits(wdata.STRB, 1, 1) @[axi4l_slavelogic.scala 227:24]
    node _T_40 = eq(_T_39, UInt<1>("h1")) @[axi4l_slavelogic.scala 227:28]
    when _T_40 : @[axi4l_slavelogic.scala 227:37]
      node _new_out_1_T = bits(wdata.DATA, 15, 8) @[axi4l_slavelogic.scala 228:35]
      new_out[1] <= _new_out_1_T @[axi4l_slavelogic.scala 228:22]
    else :
      node _new_out_1_T_1 = or(wr_reg_index, UInt<4>("h0"))
      node _new_out_1_T_2 = bits(_new_out_1_T_1, 3, 0)
      node _new_out_1_T_3 = bits(axi_regs[_new_out_1_T_2], 15, 8) @[axi4l_slavelogic.scala 230:47]
      new_out[1] <= _new_out_1_T_3 @[axi4l_slavelogic.scala 230:22]
    node _T_41 = bits(wdata.STRB, 2, 2) @[axi4l_slavelogic.scala 227:24]
    node _T_42 = eq(_T_41, UInt<1>("h1")) @[axi4l_slavelogic.scala 227:28]
    when _T_42 : @[axi4l_slavelogic.scala 227:37]
      node _new_out_2_T = bits(wdata.DATA, 23, 16) @[axi4l_slavelogic.scala 228:35]
      new_out[2] <= _new_out_2_T @[axi4l_slavelogic.scala 228:22]
    else :
      node _new_out_2_T_1 = or(wr_reg_index, UInt<4>("h0"))
      node _new_out_2_T_2 = bits(_new_out_2_T_1, 3, 0)
      node _new_out_2_T_3 = bits(axi_regs[_new_out_2_T_2], 23, 16) @[axi4l_slavelogic.scala 230:47]
      new_out[2] <= _new_out_2_T_3 @[axi4l_slavelogic.scala 230:22]
    node _T_43 = bits(wdata.STRB, 3, 3) @[axi4l_slavelogic.scala 227:24]
    node _T_44 = eq(_T_43, UInt<1>("h1")) @[axi4l_slavelogic.scala 227:28]
    when _T_44 : @[axi4l_slavelogic.scala 227:37]
      node _new_out_3_T = bits(wdata.DATA, 31, 24) @[axi4l_slavelogic.scala 228:35]
      new_out[3] <= _new_out_3_T @[axi4l_slavelogic.scala 228:22]
    else :
      node _new_out_3_T_1 = or(wr_reg_index, UInt<4>("h0"))
      node _new_out_3_T_2 = bits(_new_out_3_T_1, 3, 0)
      node _new_out_3_T_3 = bits(axi_regs[_new_out_3_T_2], 31, 24) @[axi4l_slavelogic.scala 230:47]
      new_out[3] <= _new_out_3_T_3 @[axi4l_slavelogic.scala 230:22]
    node _T_45 = eq(wStallWire, UInt<1>("h0")) @[axi4l_slavelogic.scala 234:23]
    node _T_46 = and(writeOk, _T_45) @[axi4l_slavelogic.scala 234:20]
    when _T_46 : @[axi4l_slavelogic.scala 234:36]
      bValid <= UInt<1>("h1") @[axi4l_slavelogic.scala 235:18]
      awStatus <= UInt<1>("h0") @[axi4l_slavelogic.scala 236:18]
      wStatus <= UInt<1>("h0") @[axi4l_slavelogic.scala 237:18]
      wStall <= UInt<1>("h0") @[axi4l_slavelogic.scala 238:18]
      when wr_address_match : @[axi4l_slavelogic.scala 239:32]
        node _T_47 = or(wr_reg_index, UInt<4>("h0"))
        node _T_48 = bits(_T_47, 3, 0)
        node _axi_regs_T = cat(new_out[1], new_out[0]) @[Cat.scala 33:92]
        node _axi_regs_T_1 = cat(new_out[2], _axi_regs_T) @[Cat.scala 33:92]
        node _axi_regs_T_2 = cat(new_out[3], _axi_regs_T_1) @[Cat.scala 33:92]
        axi_regs[_T_48] <= _axi_regs_T_2 @[axi4l_slavelogic.scala 240:34]
    tx_fifo.io.enq.bits <= data_tx @[AXI4LQSPI.scala 118:25]
    tx_fifo.io.enq.valid <= writeStrobes[8] @[AXI4LQSPI.scala 121:26]
    tx_fifo.io.deq.ready <= QSPIMASTER.io.data_tx.ready @[AXI4LQSPI.scala 123:26]
    QSPIMASTER.io.data_tx.valid <= tx_fifo.io.deq.valid @[AXI4LQSPI.scala 125:33]
    QSPIMASTER.io.clk_div <= clk_div @[AXI4LQSPI.scala 127:27]
    QSPIMASTER.io.clk_div_valid <= clk_div_valid @[AXI4LQSPI.scala 128:33]
    QSPIMASTER.io.addr <= addr @[AXI4LQSPI.scala 129:24]
    QSPIMASTER.io.addr_len <= addr_len @[AXI4LQSPI.scala 130:28]
    QSPIMASTER.io.cmd <= cmd @[AXI4LQSPI.scala 131:23]
    QSPIMASTER.io.cmd_len <= cmd_len @[AXI4LQSPI.scala 132:27]
    QSPIMASTER.io.dummy_len <= dummy_len @[AXI4LQSPI.scala 133:29]
    QSPIMASTER.io.data_len <= data_len @[AXI4LQSPI.scala 134:28]
    QSPIMASTER.io.data_tx.bits <= tx_fifo.io.deq.bits @[AXI4LQSPI.scala 135:32]
    QSPIMASTER.io.single_read <= single_read @[AXI4LQSPI.scala 136:31]
    QSPIMASTER.io.single_write <= single_write @[AXI4LQSPI.scala 137:32]
    QSPIMASTER.io.quad_read <= quad_read @[AXI4LQSPI.scala 138:29]
    QSPIMASTER.io.quad_write <= quad_write @[AXI4LQSPI.scala 139:30]
    state <= QSPIMASTER.io.state @[AXI4LQSPI.scala 141:11]
    quad_mode <= QSPIMASTER.io.quad_mode @[AXI4LQSPI.scala 142:15]
    data_rx <= rx_fifo.io.deq.bits @[AXI4LQSPI.scala 143:13]
    rx_fifo.io.deq.ready <= readStrobes[9] @[AXI4LQSPI.scala 144:26]
    rx_fifo.io.enq.bits <= QSPIMASTER.io.data_rx.bits @[AXI4LQSPI.scala 145:25]
    rx_fifo.io.enq.valid <= QSPIMASTER.io.data_rx.valid @[AXI4LQSPI.scala 146:26]
    QSPIMASTER.io.data_rx.ready <= rx_fifo.io.enq.ready @[AXI4LQSPI.scala 147:33]

