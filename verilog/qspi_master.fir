circuit qspi_master :
  module clockgen :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, flip clk_div_valid : UInt<1>, flip clk_div : UInt<8>, spi_clk : UInt<1>, spi_fall : UInt<1>, spi_rise : UInt<1>}

    reg counter_target : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[clockgen.scala 22:31]
    reg counter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[clockgen.scala 23:24]
    reg spi_clk_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[clockgen.scala 24:28]
    reg running : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[clockgen.scala 25:24]
    wire counter_target_next : UInt @[clockgen.scala 28:40]
    counter_target_next <= counter_target @[clockgen.scala 28:40]
    wire counter_next : UInt @[clockgen.scala 29:33]
    counter_next <= counter @[clockgen.scala 29:33]
    wire spi_clk_next : UInt<1> @[clockgen.scala 30:33]
    spi_clk_next <= spi_clk_reg @[clockgen.scala 30:33]
    io.spi_rise <= UInt<1>("h0") @[clockgen.scala 33:15]
    io.spi_fall <= UInt<1>("h0") @[clockgen.scala 34:15]
    node _counter_target_next_T = mux(io.clk_div_valid, io.clk_div, counter_target) @[clockgen.scala 37:29]
    counter_target_next <= _counter_target_next_T @[clockgen.scala 37:23]
    node _T = eq(counter, counter_target) @[clockgen.scala 40:16]
    when _T : @[clockgen.scala 40:36]
      counter_next <= UInt<1>("h0") @[clockgen.scala 41:18]
      node _spi_clk_next_T = eq(spi_clk_reg, UInt<1>("h0")) @[clockgen.scala 42:21]
      spi_clk_next <= _spi_clk_next_T @[clockgen.scala 42:18]
      node _T_1 = eq(spi_clk_reg, UInt<1>("h0")) @[clockgen.scala 43:22]
      when _T_1 : @[clockgen.scala 43:35]
        io.spi_rise <= running @[clockgen.scala 44:19]
      else :
        io.spi_fall <= running @[clockgen.scala 46:19]
    else :
      node _T_2 = neq(counter, counter_target) @[clockgen.scala 48:22]
      when _T_2 : @[clockgen.scala 48:42]
        node _counter_next_T = add(counter, UInt<1>("h1")) @[clockgen.scala 49:29]
        node _counter_next_T_1 = tail(_counter_next_T, 1) @[clockgen.scala 49:29]
        counter_next <= _counter_next_T_1 @[clockgen.scala 49:18]
        spi_clk_next <= spi_clk_reg @[clockgen.scala 50:18]
    counter_target <= counter_target_next @[clockgen.scala 54:18]
    node _T_3 = eq(spi_clk_reg, UInt<1>("h0")) @[clockgen.scala 55:22]
    node _T_4 = eq(io.en, UInt<1>("h0")) @[clockgen.scala 55:37]
    node _T_5 = and(_T_3, _T_4) @[clockgen.scala 55:34]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[clockgen.scala 55:8]
    when _T_6 : @[clockgen.scala 55:46]
      running <= UInt<1>("h1") @[clockgen.scala 56:13]
      spi_clk_reg <= spi_clk_next @[clockgen.scala 57:17]
      counter <= counter_next @[clockgen.scala 58:13]
    else :
      running <= UInt<1>("h0") @[clockgen.scala 60:13]
    io.spi_clk <= spi_clk_reg @[clockgen.scala 64:14]

  module rx :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, flip rx_edge : UInt<1>, rx_done : UInt<1>, flip sdi0 : UInt<1>, flip sdi1 : UInt<1>, flip sdi2 : UInt<1>, flip sdi3 : UInt<1>, flip en_quad_in : UInt<1>, flip counter_in : UInt<16>, flip counter_in_upd : UInt<1>, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, clk_en_o : UInt<1>}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[rx.scala 31:22]
    reg counter : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[rx.scala 32:24]
    reg counterTrgt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h8")) @[rx.scala 33:28]
    reg dataInt : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rx.scala 34:24]
    io.rx_done <= UInt<1>("h0") @[rx.scala 37:14]
    io.data.valid <= UInt<1>("h0") @[rx.scala 38:17]
    io.data.bits <= dataInt @[rx.scala 39:16]
    io.clk_en_o <= UInt<1>("h0") @[rx.scala 40:15]
    node _word_Done_T = eq(io.en_quad_in, UInt<1>("h0")) @[rx.scala 43:20]
    node _word_Done_T_1 = bits(counter, 4, 0) @[rx.scala 43:45]
    node _word_Done_T_2 = eq(_word_Done_T_1, UInt<5>("h1f")) @[rx.scala 43:52]
    node _word_Done_T_3 = and(_word_Done_T, _word_Done_T_2) @[rx.scala 43:35]
    node _word_Done_T_4 = bits(counter, 2, 0) @[rx.scala 43:96]
    node _word_Done_T_5 = eq(_word_Done_T_4, UInt<3>("h7")) @[rx.scala 43:103]
    node _word_Done_T_6 = and(io.en_quad_in, _word_Done_T_5) @[rx.scala 43:86]
    node word_Done = or(_word_Done_T_3, _word_Done_T_6) @[rx.scala 43:68]
    node _done_T = sub(counterTrgt, UInt<1>("h1")) @[rx.scala 44:40]
    node _done_T_1 = tail(_done_T, 1) @[rx.scala 44:40]
    node _done_T_2 = eq(counter, _done_T_1) @[rx.scala 44:23]
    node done = and(_done_T_2, io.rx_edge) @[rx.scala 44:48]
    io.rx_done <= done @[rx.scala 46:14]
    when io.counter_in_upd : @[rx.scala 49:27]
      node _counterTrgt_T = bits(io.counter_in, 15, 2) @[rx.scala 50:66]
      node _counterTrgt_T_1 = cat(UInt<2>("h0"), _counterTrgt_T) @[Cat.scala 33:92]
      node _counterTrgt_T_2 = mux(io.en_quad_in, _counterTrgt_T_1, io.counter_in) @[rx.scala 50:23]
      counterTrgt <= _counterTrgt_T_2 @[rx.scala 50:17]
    node _T = eq(UInt<2>("h0"), state) @[rx.scala 54:17]
    when _T : @[rx.scala 54:17]
      io.clk_en_o <= UInt<1>("h0") @[rx.scala 56:19]
      when io.en : @[rx.scala 57:19]
        state <= UInt<2>("h1") @[rx.scala 58:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[rx.scala 54:17]
      when _T_1 : @[rx.scala 54:17]
        io.clk_en_o <= UInt<1>("h1") @[rx.scala 62:19]
        when io.rx_edge : @[rx.scala 63:24]
          node _counter_T = add(counter, UInt<1>("h1")) @[rx.scala 64:28]
          node _counter_T_1 = tail(_counter_T, 1) @[rx.scala 64:28]
          counter <= _counter_T_1 @[rx.scala 64:17]
          node _dataInt_T = bits(dataInt, 27, 0) @[rx.scala 65:50]
          node dataInt_lo = cat(io.sdi1, io.sdi0) @[Cat.scala 33:92]
          node dataInt_hi_hi = cat(_dataInt_T, io.sdi3) @[Cat.scala 33:92]
          node dataInt_hi = cat(dataInt_hi_hi, io.sdi2) @[Cat.scala 33:92]
          node _dataInt_T_1 = cat(dataInt_hi, dataInt_lo) @[Cat.scala 33:92]
          node _dataInt_T_2 = bits(dataInt, 30, 0) @[rx.scala 65:107]
          node _dataInt_T_3 = cat(_dataInt_T_2, io.sdi0) @[Cat.scala 33:92]
          node _dataInt_T_4 = mux(io.en_quad_in, _dataInt_T_1, _dataInt_T_3) @[rx.scala 65:23]
          dataInt <= _dataInt_T_4 @[rx.scala 65:17]
          when done : @[rx.scala 67:20]
            counter <= UInt<1>("h0") @[rx.scala 68:19]
            io.data.valid <= UInt<1>("h1") @[rx.scala 69:25]
            when io.data.ready : @[rx.scala 70:31]
              state <= UInt<2>("h0") @[rx.scala 71:19]
            else :
              state <= UInt<2>("h2") @[rx.scala 73:19]
          else :
            when word_Done : @[rx.scala 75:31]
              io.data.valid <= UInt<1>("h1") @[rx.scala 76:25]
              node _T_2 = eq(io.data.ready, UInt<1>("h0")) @[rx.scala 77:16]
              when _T_2 : @[rx.scala 77:32]
                state <= UInt<2>("h3") @[rx.scala 78:19]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[rx.scala 54:17]
        when _T_3 : @[rx.scala 54:17]
          io.data.valid <= UInt<1>("h1") @[rx.scala 84:21]
          when io.data.ready : @[rx.scala 85:27]
            state <= UInt<2>("h0") @[rx.scala 86:15]
        else :
          node _T_4 = eq(UInt<2>("h3"), state) @[rx.scala 54:17]
          when _T_4 : @[rx.scala 54:17]
            io.data.valid <= UInt<1>("h1") @[rx.scala 90:21]
            when io.data.ready : @[rx.scala 91:27]
              state <= UInt<2>("h1") @[rx.scala 92:15]


  module tx :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, flip tx_edge : UInt<1>, tx_done : UInt<1>, sdo0 : UInt<1>, sdo1 : UInt<1>, sdo2 : UInt<1>, sdo3 : UInt<1>, flip en_quad_in : UInt<1>, flip counter_in : UInt<16>, flip counter_in_upd : UInt<1>, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, clk_en_o : UInt<1>}

    reg dataInt : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[tx.scala 28:24]
    reg counter : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[tx.scala 29:24]
    reg counterTrgt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h8")) @[tx.scala 30:28]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[tx.scala 31:22]
    wire done : UInt<1> @[tx.scala 34:18]
    wire regDone : UInt<1> @[tx.scala 35:21]
    wire counter_next : UInt<16> @[tx.scala 36:26]
    counter_next <= counter @[tx.scala 37:16]
    when io.tx_edge : @[tx.scala 38:22]
      node _counter_next_T = add(counter, UInt<1>("h1")) @[tx.scala 39:31]
      node _counter_next_T_1 = tail(_counter_next_T, 1) @[tx.scala 39:31]
      counter_next <= _counter_next_T_1 @[tx.scala 39:20]
      when done : @[tx.scala 40:18]
        counter_next <= UInt<1>("h0") @[tx.scala 41:20]
    counter <= counter_next @[tx.scala 44:9]
    node _regDone_T = eq(io.en_quad_in, UInt<1>("h0")) @[tx.scala 47:15]
    node _regDone_T_1 = bits(counter, 4, 0) @[tx.scala 47:40]
    node _regDone_T_2 = eq(_regDone_T_1, UInt<5>("h1f")) @[tx.scala 47:47]
    node _regDone_T_3 = and(_regDone_T, _regDone_T_2) @[tx.scala 47:30]
    node _regDone_T_4 = bits(counter, 2, 0) @[tx.scala 47:91]
    node _regDone_T_5 = eq(_regDone_T_4, UInt<3>("h7")) @[tx.scala 47:98]
    node _regDone_T_6 = and(io.en_quad_in, _regDone_T_5) @[tx.scala 47:81]
    node _regDone_T_7 = or(_regDone_T_3, _regDone_T_6) @[tx.scala 47:63]
    regDone <= _regDone_T_7 @[tx.scala 47:11]
    node _done_T = sub(counterTrgt, UInt<1>("h1")) @[tx.scala 48:37]
    node _done_T_1 = tail(_done_T, 1) @[tx.scala 48:37]
    node _done_T_2 = eq(counter, _done_T_1) @[tx.scala 48:20]
    node _done_T_3 = and(_done_T_2, io.tx_edge) @[tx.scala 48:45]
    done <= _done_T_3 @[tx.scala 48:8]
    io.tx_done <= done @[tx.scala 51:14]
    io.data.ready <= UInt<1>("h0") @[tx.scala 52:17]
    node _io_sdo0_T = bits(dataInt, 28, 28) @[tx.scala 53:40]
    node _io_sdo0_T_1 = bits(dataInt, 31, 31) @[tx.scala 53:53]
    node _io_sdo0_T_2 = mux(io.en_quad_in, _io_sdo0_T, _io_sdo0_T_1) @[tx.scala 53:17]
    io.sdo0 <= _io_sdo0_T_2 @[tx.scala 53:11]
    node _io_sdo1_T = bits(dataInt, 29, 29) @[tx.scala 54:21]
    io.sdo1 <= _io_sdo1_T @[tx.scala 54:11]
    node _io_sdo2_T = bits(dataInt, 30, 30) @[tx.scala 55:21]
    io.sdo2 <= _io_sdo2_T @[tx.scala 55:11]
    node _io_sdo3_T = bits(dataInt, 31, 31) @[tx.scala 56:21]
    io.sdo3 <= _io_sdo3_T @[tx.scala 56:11]
    io.clk_en_o <= UInt<1>("h0") @[tx.scala 57:15]
    when io.counter_in_upd : @[tx.scala 60:27]
      node _counterTrgt_T = bits(io.counter_in, 15, 2) @[tx.scala 61:66]
      node _counterTrgt_T_1 = cat(UInt<2>("h0"), _counterTrgt_T) @[Cat.scala 33:92]
      node _counterTrgt_T_2 = mux(io.en_quad_in, _counterTrgt_T_1, io.counter_in) @[tx.scala 61:23]
      counterTrgt <= _counterTrgt_T_2 @[tx.scala 61:17]
    node _T = eq(UInt<1>("h0"), state) @[tx.scala 65:17]
    when _T : @[tx.scala 65:17]
      io.clk_en_o <= UInt<1>("h0") @[tx.scala 67:19]
      node _T_1 = and(io.en, io.data.valid) @[tx.scala 68:18]
      when _T_1 : @[tx.scala 68:36]
        dataInt <= io.data.bits @[tx.scala 69:17]
        io.data.ready <= UInt<1>("h1") @[tx.scala 70:23]
        state <= UInt<1>("h1") @[tx.scala 71:15]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[tx.scala 65:17]
      when _T_2 : @[tx.scala 65:17]
        io.clk_en_o <= UInt<1>("h1") @[tx.scala 75:19]
        when io.tx_edge : @[tx.scala 76:24]
          node _counter_next_T_2 = add(counter, UInt<1>("h1")) @[tx.scala 77:33]
          node _counter_next_T_3 = tail(_counter_next_T_2, 1) @[tx.scala 77:33]
          counter_next <= _counter_next_T_3 @[tx.scala 77:22]
          node _dataInt_T = bits(dataInt, 27, 0) @[tx.scala 78:50]
          node _dataInt_T_1 = cat(_dataInt_T, UInt<4>("h0")) @[Cat.scala 33:92]
          node _dataInt_T_2 = bits(dataInt, 30, 0) @[tx.scala 78:81]
          node _dataInt_T_3 = cat(_dataInt_T_2, UInt<1>("h0")) @[Cat.scala 33:92]
          node _dataInt_T_4 = mux(io.en_quad_in, _dataInt_T_1, _dataInt_T_3) @[tx.scala 78:23]
          dataInt <= _dataInt_T_4 @[tx.scala 78:17]
          when done : @[tx.scala 80:20]
            counter_next <= UInt<1>("h0") @[tx.scala 81:24]
            node _T_3 = and(io.en, io.data.valid) @[tx.scala 82:22]
            when _T_3 : @[tx.scala 82:40]
              dataInt <= io.data.bits @[tx.scala 83:21]
              io.data.ready <= UInt<1>("h1") @[tx.scala 84:27]
              state <= UInt<1>("h1") @[tx.scala 85:19]
            else :
              io.clk_en_o <= UInt<1>("h0") @[tx.scala 87:25]
              state <= UInt<1>("h0") @[tx.scala 88:19]
          else :
            when regDone : @[tx.scala 90:30]
              when io.data.valid : @[tx.scala 91:31]
                dataInt <= io.data.bits @[tx.scala 92:21]
                io.data.ready <= UInt<1>("h1") @[tx.scala 93:27]
              else :
                io.clk_en_o <= UInt<1>("h0") @[tx.scala 95:25]
                state <= UInt<1>("h0") @[tx.scala 96:19]


  module qspi_master :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip clk_div : UInt<8>, flip clk_div_valid : UInt<1>, flip addr : UInt<32>, flip addr_len : UInt<6>, flip cmd : UInt<32>, flip cmd_len : UInt<6>, flip dummy_len : UInt<16>, flip data_len : UInt<16>, flip data_tx : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, data_rx : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip single_read : UInt<1>, flip single_write : UInt<1>, flip quad_read : UInt<1>, flip quad_write : UInt<1>, spi_clk : UInt<1>, cs : UInt<1>, sdo0 : UInt<1>, sdo1 : UInt<1>, sdo2 : UInt<1>, sdo3 : UInt<1>, flip sdi0 : UInt<1>, flip sdi1 : UInt<1>, flip sdi2 : UInt<1>, flip sdi3 : UInt<1>, state : UInt<3>, quad_mode : UInt<1>}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[qspi_master.scala 53:22]
    io.state <= state @[qspi_master.scala 57:12]
    wire clock_en : UInt<1> @[qspi_master.scala 61:29]
    clock_en <= UInt<1>("h0") @[qspi_master.scala 61:29]
    wire cs_wire : UInt<1> @[qspi_master.scala 63:28]
    cs_wire <= UInt<1>("h1") @[qspi_master.scala 63:28]
    wire tx_en : UInt<1> @[qspi_master.scala 65:26]
    tx_en <= UInt<1>("h0") @[qspi_master.scala 65:26]
    wire rx_en : UInt<1> @[qspi_master.scala 67:26]
    rx_en <= UInt<1>("h0") @[qspi_master.scala 67:26]
    wire en_quad : UInt<1> @[qspi_master.scala 69:21]
    wire counter_tx : UInt<16> @[qspi_master.scala 71:31]
    counter_tx <= UInt<16>("h0") @[qspi_master.scala 71:31]
    wire counter_tx_upd : UInt<1> @[qspi_master.scala 73:35]
    counter_tx_upd <= UInt<1>("h0") @[qspi_master.scala 73:35]
    wire counter_rx : UInt<16> @[qspi_master.scala 75:31]
    counter_rx <= UInt<16>("h0") @[qspi_master.scala 75:31]
    wire counter_rx_upd : UInt<1> @[qspi_master.scala 77:35]
    counter_rx_upd <= UInt<1>("h0") @[qspi_master.scala 77:35]
    wire data_to_tx : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>} @[qspi_master.scala 79:24]
    data_to_tx.valid <= UInt<1>("h0") @[qspi_master.scala 81:20]
    data_to_tx.bits <= UInt<1>("h0") @[qspi_master.scala 83:19]
    wire tx_done : UInt<1> @[qspi_master.scala 85:21]
    wire rx_done : UInt<1> @[qspi_master.scala 88:21]
    wire tx_clock_en : UInt<1> @[qspi_master.scala 90:25]
    wire rx_clock_en : UInt<1> @[qspi_master.scala 92:25]
    wire selector : UInt<3> @[qspi_master.scala 94:29]
    selector <= UInt<3>("h0") @[qspi_master.scala 94:29]
    wire data_valid : UInt<1> @[qspi_master.scala 96:31]
    data_valid <= UInt<1>("h0") @[qspi_master.scala 96:31]
    wire spi_fall : UInt<1> @[qspi_master.scala 98:22]
    wire spi_rise : UInt<1> @[qspi_master.scala 100:22]
    wire spi_clk : UInt<1> @[qspi_master.scala 102:28]
    spi_clk <= UInt<1>("h0") @[qspi_master.scala 102:28]
    io.spi_clk <= spi_clk @[qspi_master.scala 104:18]
    reg en_quad_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qspi_master.scala 109:28]
    reg do_rx : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[qspi_master.scala 111:22]
    inst clock_generator of clockgen @[qspi_master.scala 114:31]
    clock_generator.clock <= clock
    clock_generator.reset <= reset
    inst receiver of rx @[qspi_master.scala 115:24]
    receiver.clock <= clock
    receiver.reset <= reset
    inst transmitter of tx @[qspi_master.scala 116:27]
    transmitter.clock <= clock
    transmitter.reset <= reset
    node _T = or(io.quad_read, io.quad_write) @[qspi_master.scala 119:21]
    when _T : @[qspi_master.scala 119:39]
      en_quad_reg <= UInt<1>("h1") @[qspi_master.scala 120:17]
    else :
      node _T_1 = eq(state, UInt<3>("h0")) @[qspi_master.scala 121:20]
      when _T_1 : @[qspi_master.scala 121:30]
        en_quad_reg <= UInt<1>("h0") @[qspi_master.scala 122:17]
    node _T_2 = or(io.quad_read, io.single_read) @[qspi_master.scala 125:21]
    when _T_2 : @[qspi_master.scala 125:40]
      do_rx <= UInt<1>("h1") @[qspi_master.scala 126:11]
    else :
      node _T_3 = eq(state, UInt<3>("h0")) @[qspi_master.scala 127:20]
      when _T_3 : @[qspi_master.scala 127:30]
        do_rx <= UInt<1>("h0") @[qspi_master.scala 128:11]
    node _en_quad_T = or(io.quad_read, io.quad_write) @[qspi_master.scala 131:27]
    node _en_quad_T_1 = bits(en_quad_reg, 0, 0) @[qspi_master.scala 131:59]
    node _en_quad_T_2 = or(_en_quad_T, _en_quad_T_1) @[qspi_master.scala 131:44]
    en_quad <= _en_quad_T_2 @[qspi_master.scala 131:11]
    io.quad_mode <= en_quad @[qspi_master.scala 132:16]
    clock_generator.io.en <= clock_en @[qspi_master.scala 136:25]
    clock_generator.io.clk_div_valid <= io.clk_div_valid @[qspi_master.scala 137:36]
    clock_generator.io.clk_div <= io.clk_div @[qspi_master.scala 138:30]
    spi_fall <= clock_generator.io.spi_fall @[qspi_master.scala 139:12]
    spi_rise <= clock_generator.io.spi_rise @[qspi_master.scala 140:11]
    transmitter.io.tx_edge <= spi_fall @[qspi_master.scala 141:26]
    spi_clk <= clock_generator.io.spi_clk @[qspi_master.scala 142:11]
    receiver.io.rx_edge <= spi_rise @[qspi_master.scala 143:23]
    transmitter.io.en <= tx_en @[qspi_master.scala 146:21]
    transmitter.io.en_quad_in <= en_quad @[qspi_master.scala 147:29]
    transmitter.io.data <= data_to_tx @[qspi_master.scala 148:23]
    transmitter.io.counter_in <= counter_tx @[qspi_master.scala 149:29]
    transmitter.io.counter_in_upd <= counter_tx_upd @[qspi_master.scala 150:33]
    tx_done <= transmitter.io.tx_done @[qspi_master.scala 151:11]
    tx_clock_en <= transmitter.io.clk_en_o @[qspi_master.scala 152:15]
    io.sdo0 <= transmitter.io.sdo0 @[qspi_master.scala 153:11]
    io.sdo1 <= transmitter.io.sdo1 @[qspi_master.scala 154:11]
    io.sdo2 <= transmitter.io.sdo2 @[qspi_master.scala 155:11]
    io.sdo3 <= transmitter.io.sdo3 @[qspi_master.scala 156:11]
    receiver.io.en <= rx_en @[qspi_master.scala 159:18]
    receiver.io.en_quad_in <= en_quad @[qspi_master.scala 160:26]
    receiver.io.sdi0 <= io.sdi0 @[qspi_master.scala 161:20]
    receiver.io.sdi1 <= io.sdi1 @[qspi_master.scala 162:20]
    receiver.io.sdi2 <= io.sdi2 @[qspi_master.scala 163:20]
    receiver.io.sdi3 <= io.sdi3 @[qspi_master.scala 164:20]
    receiver.io.counter_in <= counter_rx @[qspi_master.scala 165:26]
    receiver.io.counter_in_upd <= counter_rx_upd @[qspi_master.scala 166:30]
    rx_done <= receiver.io.rx_done @[qspi_master.scala 167:11]
    io.data_rx.bits <= receiver.io.data.bits @[qspi_master.scala 168:14]
    io.data_rx.valid <= receiver.io.data.valid @[qspi_master.scala 168:14]
    receiver.io.data.ready <= io.data_rx.ready @[qspi_master.scala 168:14]
    rx_clock_en <= receiver.io.clk_en_o @[qspi_master.scala 169:15]
    io.data_tx.ready <= UInt<1>("h0") @[qspi_master.scala 172:20]
    node _data_to_tx_bits_T = eq(selector, UInt<1>("h0")) @[qspi_master.scala 174:15]
    node _data_to_tx_bits_T_1 = eq(selector, UInt<1>("h1")) @[qspi_master.scala 175:15]
    node _data_to_tx_bits_T_2 = eq(selector, UInt<2>("h2")) @[qspi_master.scala 176:15]
    node _data_to_tx_bits_T_3 = eq(selector, UInt<2>("h3")) @[qspi_master.scala 177:15]
    node _data_to_tx_bits_T_4 = eq(selector, UInt<3>("h4")) @[qspi_master.scala 178:15]
    node _data_to_tx_bits_T_5 = mux(_data_to_tx_bits_T_4, io.data_tx.bits, UInt<1>("h0")) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_6 = mux(_data_to_tx_bits_T_3, io.addr, _data_to_tx_bits_T_5) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_7 = mux(_data_to_tx_bits_T_2, io.cmd, _data_to_tx_bits_T_6) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_8 = mux(_data_to_tx_bits_T_1, UInt<1>("h0"), _data_to_tx_bits_T_7) @[Mux.scala 101:16]
    node _data_to_tx_bits_T_9 = mux(_data_to_tx_bits_T, UInt<1>("h0"), _data_to_tx_bits_T_8) @[Mux.scala 101:16]
    data_to_tx.bits <= _data_to_tx_bits_T_9 @[qspi_master.scala 173:19]
    node _data_to_tx_valid_T = eq(selector, UInt<1>("h0")) @[qspi_master.scala 182:15]
    node _data_to_tx_valid_T_1 = eq(selector, UInt<1>("h1")) @[qspi_master.scala 183:15]
    node _data_to_tx_valid_T_2 = eq(selector, UInt<2>("h2")) @[qspi_master.scala 184:15]
    node _data_to_tx_valid_T_3 = eq(selector, UInt<2>("h3")) @[qspi_master.scala 185:15]
    node _data_to_tx_valid_T_4 = eq(selector, UInt<3>("h4")) @[qspi_master.scala 186:15]
    node _data_to_tx_valid_T_5 = mux(_data_to_tx_valid_T_4, io.data_tx.valid, UInt<1>("h0")) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_6 = mux(_data_to_tx_valid_T_3, data_valid, _data_to_tx_valid_T_5) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_7 = mux(_data_to_tx_valid_T_2, data_valid, _data_to_tx_valid_T_6) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_8 = mux(_data_to_tx_valid_T_1, UInt<1>("h1"), _data_to_tx_valid_T_7) @[Mux.scala 101:16]
    node _data_to_tx_valid_T_9 = mux(_data_to_tx_valid_T, UInt<1>("h0"), _data_to_tx_valid_T_8) @[Mux.scala 101:16]
    data_to_tx.valid <= _data_to_tx_valid_T_9 @[qspi_master.scala 181:20]
    node _io_data_tx_ready_T = eq(selector, UInt<3>("h4")) @[qspi_master.scala 190:15]
    node _io_data_tx_ready_T_1 = mux(_io_data_tx_ready_T, data_to_tx.ready, UInt<1>("h0")) @[Mux.scala 101:16]
    io.data_tx.ready <= _io_data_tx_ready_T_1 @[qspi_master.scala 189:20]
    node _T_4 = eq(UInt<3>("h0"), state) @[qspi_master.scala 196:19]
    when _T_4 : @[qspi_master.scala 196:19]
      node _T_5 = or(io.single_read, io.single_write) @[qspi_master.scala 198:27]
      node _T_6 = or(_T_5, io.quad_read) @[qspi_master.scala 198:46]
      node _T_7 = or(_T_6, io.quad_write) @[qspi_master.scala 198:62]
      when _T_7 : @[qspi_master.scala 198:80]
        cs_wire <= UInt<1>("h0") @[qspi_master.scala 199:17]
        clock_en <= UInt<1>("h1") @[qspi_master.scala 200:18]
        node _T_8 = neq(io.cmd_len, UInt<1>("h0")) @[qspi_master.scala 201:25]
        when _T_8 : @[qspi_master.scala 201:34]
          counter_tx <= io.cmd_len @[qspi_master.scala 202:22]
          counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 203:26]
          selector <= UInt<2>("h2") @[qspi_master.scala 204:20]
          data_valid <= UInt<1>("h1") @[qspi_master.scala 205:22]
          tx_en <= UInt<1>("h1") @[qspi_master.scala 206:17]
          state <= UInt<3>("h1") @[qspi_master.scala 207:17]
        else :
          node _T_9 = neq(io.addr_len, UInt<1>("h0")) @[qspi_master.scala 208:32]
          when _T_9 : @[qspi_master.scala 208:41]
            counter_tx <= io.addr_len @[qspi_master.scala 209:22]
            counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 210:26]
            selector <= UInt<2>("h3") @[qspi_master.scala 211:20]
            data_valid <= UInt<1>("h1") @[qspi_master.scala 212:22]
            tx_en <= UInt<1>("h1") @[qspi_master.scala 213:17]
            state <= UInt<3>("h2") @[qspi_master.scala 214:17]
          else :
            node _T_10 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 215:32]
            when _T_10 : @[qspi_master.scala 215:41]
              node _T_11 = or(io.single_read, io.quad_read) @[qspi_master.scala 216:31]
              when _T_11 : @[qspi_master.scala 216:48]
                node _T_12 = neq(io.dummy_len, UInt<1>("h0")) @[qspi_master.scala 217:31]
                when _T_12 : @[qspi_master.scala 217:40]
                  counter_tx <= io.dummy_len @[qspi_master.scala 218:26]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 219:30]
                  selector <= UInt<1>("h1") @[qspi_master.scala 220:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 221:21]
                  state <= UInt<3>("h3") @[qspi_master.scala 222:21]
                else :
                  counter_rx <= io.data_len @[qspi_master.scala 224:26]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 225:30]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 226:21]
                  state <= UInt<3>("h5") @[qspi_master.scala 227:21]
              else :
                counter_tx <= io.data_len @[qspi_master.scala 230:24]
                counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 231:28]
                selector <= UInt<3>("h4") @[qspi_master.scala 232:22]
                tx_en <= UInt<1>("h1") @[qspi_master.scala 233:19]
                state <= UInt<3>("h4") @[qspi_master.scala 234:19]
            else :
              state <= UInt<3>("h0") @[qspi_master.scala 238:17]
    else :
      node _T_13 = eq(UInt<3>("h1"), state) @[qspi_master.scala 196:19]
      when _T_13 : @[qspi_master.scala 196:19]
        clock_en <= UInt<1>("h1") @[qspi_master.scala 244:16]
        cs_wire <= UInt<1>("h0") @[qspi_master.scala 245:15]
        when tx_done : @[qspi_master.scala 246:21]
          node _T_14 = neq(io.addr_len, UInt<1>("h0")) @[qspi_master.scala 247:26]
          when _T_14 : @[qspi_master.scala 247:35]
            counter_tx <= io.addr_len @[qspi_master.scala 248:22]
            counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 249:26]
            selector <= UInt<2>("h3") @[qspi_master.scala 250:20]
            data_valid <= UInt<1>("h1") @[qspi_master.scala 251:22]
            tx_en <= UInt<1>("h1") @[qspi_master.scala 252:17]
            state <= UInt<3>("h2") @[qspi_master.scala 253:17]
          else :
            node _T_15 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 254:32]
            when _T_15 : @[qspi_master.scala 254:41]
              when do_rx : @[qspi_master.scala 255:23]
                node _T_16 = neq(io.dummy_len, UInt<1>("h0")) @[qspi_master.scala 256:31]
                when _T_16 : @[qspi_master.scala 256:40]
                  counter_tx <= io.dummy_len @[qspi_master.scala 257:26]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 258:30]
                  selector <= UInt<1>("h1") @[qspi_master.scala 259:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 260:21]
                  state <= UInt<3>("h3") @[qspi_master.scala 261:21]
                else :
                  counter_rx <= io.data_len @[qspi_master.scala 263:26]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 264:30]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 265:21]
                  state <= UInt<3>("h5") @[qspi_master.scala 266:21]
              else :
                counter_tx <= io.data_len @[qspi_master.scala 269:24]
                counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 270:28]
                selector <= UInt<3>("h4") @[qspi_master.scala 271:22]
                tx_en <= UInt<1>("h1") @[qspi_master.scala 273:19]
                state <= UInt<3>("h4") @[qspi_master.scala 274:19]
            else :
              state <= UInt<3>("h0") @[qspi_master.scala 277:17]
        else :
          tx_en <= UInt<1>("h1") @[qspi_master.scala 280:15]
      else :
        node _T_17 = eq(UInt<3>("h2"), state) @[qspi_master.scala 196:19]
        when _T_17 : @[qspi_master.scala 196:19]
          clock_en <= UInt<1>("h1") @[qspi_master.scala 286:16]
          cs_wire <= UInt<1>("h0") @[qspi_master.scala 287:15]
          when tx_done : @[qspi_master.scala 288:21]
            node _T_18 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 289:26]
            when _T_18 : @[qspi_master.scala 289:35]
              when do_rx : @[qspi_master.scala 290:23]
                node _T_19 = neq(io.dummy_len, UInt<1>("h0")) @[qspi_master.scala 291:31]
                when _T_19 : @[qspi_master.scala 291:40]
                  counter_tx <= io.dummy_len @[qspi_master.scala 292:26]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 293:30]
                  selector <= UInt<1>("h1") @[qspi_master.scala 294:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 295:21]
                  state <= UInt<3>("h3") @[qspi_master.scala 296:21]
                else :
                  counter_rx <= io.data_len @[qspi_master.scala 298:26]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 299:30]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 300:21]
                  state <= UInt<3>("h5") @[qspi_master.scala 301:21]
              else :
                counter_tx <= io.data_len @[qspi_master.scala 304:24]
                counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 305:28]
                selector <= UInt<3>("h4") @[qspi_master.scala 306:22]
                tx_en <= UInt<1>("h1") @[qspi_master.scala 307:19]
                state <= UInt<3>("h4") @[qspi_master.scala 308:19]
            else :
              state <= UInt<3>("h0") @[qspi_master.scala 311:17]
          else :
            tx_en <= UInt<1>("h1") @[qspi_master.scala 314:15]
        else :
          node _T_20 = eq(UInt<3>("h3"), state) @[qspi_master.scala 196:19]
          when _T_20 : @[qspi_master.scala 196:19]
            clock_en <= UInt<1>("h1") @[qspi_master.scala 319:16]
            cs_wire <= UInt<1>("h0") @[qspi_master.scala 320:15]
            when tx_done : @[qspi_master.scala 321:21]
              node _T_21 = neq(io.data_len, UInt<1>("h0")) @[qspi_master.scala 322:26]
              when _T_21 : @[qspi_master.scala 322:35]
                when do_rx : @[qspi_master.scala 323:23]
                  counter_rx <= io.data_len @[qspi_master.scala 324:24]
                  counter_rx_upd <= UInt<1>("h1") @[qspi_master.scala 325:28]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 326:19]
                  state <= UInt<3>("h5") @[qspi_master.scala 327:19]
                else :
                  counter_tx <= io.data_len @[qspi_master.scala 329:24]
                  counter_tx_upd <= UInt<1>("h1") @[qspi_master.scala 330:28]
                  selector <= UInt<3>("h4") @[qspi_master.scala 331:22]
                  data_valid <= UInt<1>("h1") @[qspi_master.scala 332:24]
                  tx_en <= UInt<1>("h1") @[qspi_master.scala 333:19]
                  state <= UInt<3>("h4") @[qspi_master.scala 334:19]
              else :
                state <= UInt<3>("h0") @[qspi_master.scala 337:17]
            else :
              tx_en <= UInt<1>("h1") @[qspi_master.scala 340:15]
          else :
            node _T_22 = eq(UInt<3>("h4"), state) @[qspi_master.scala 196:19]
            when _T_22 : @[qspi_master.scala 196:19]
              clock_en <= tx_clock_en @[qspi_master.scala 346:16]
              cs_wire <= UInt<1>("h0") @[qspi_master.scala 347:15]
              selector <= UInt<3>("h4") @[qspi_master.scala 348:16]
              tx_en <= UInt<1>("h1") @[qspi_master.scala 349:13]
              when tx_done : @[qspi_master.scala 350:21]
                state <= UInt<3>("h0") @[qspi_master.scala 351:15]
                clock_en <= UInt<1>("h0") @[qspi_master.scala 352:18]
              else :
                state <= UInt<3>("h4") @[qspi_master.scala 354:15]
            else :
              node _T_23 = eq(UInt<3>("h5"), state) @[qspi_master.scala 196:19]
              when _T_23 : @[qspi_master.scala 196:19]
                clock_en <= rx_clock_en @[qspi_master.scala 359:16]
                cs_wire <= UInt<1>("h0") @[qspi_master.scala 360:15]
                when rx_done : @[qspi_master.scala 361:21]
                  state <= UInt<3>("h6") @[qspi_master.scala 362:15]
                else :
                  state <= UInt<3>("h5") @[qspi_master.scala 364:15]
                  rx_en <= UInt<1>("h1") @[qspi_master.scala 365:15]
              else :
                node _T_24 = eq(UInt<3>("h6"), state) @[qspi_master.scala 196:19]
                when _T_24 : @[qspi_master.scala 196:19]
                  clock_en <= UInt<1>("h1") @[qspi_master.scala 370:16]
                  cs_wire <= UInt<1>("h0") @[qspi_master.scala 371:15]
                  when spi_fall : @[qspi_master.scala 372:22]
                    state <= UInt<3>("h0") @[qspi_master.scala 373:15]
                  else :
                    state <= UInt<3>("h6") @[qspi_master.scala 375:15]
    io.cs <= cs_wire @[qspi_master.scala 381:9]

